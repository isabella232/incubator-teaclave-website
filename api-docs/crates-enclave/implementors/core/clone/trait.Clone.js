(function() {var implementors = {};
implementors["aho_corasick"] = [{"text":"impl&lt;S:&nbsp;Clone + StateID&gt; Clone for AhoCorasick&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for AhoCorasickBuilder","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for MatchKind","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for Searcher","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]}];
implementors["anyhow"] = [{"text":"impl&lt;'a&gt; Clone for Chain&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["base64"] = [{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for CharacterSet","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B:&nbsp;BitBlock&gt; Clone for BitVec&lt;B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Iter&lt;'a, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, B:&nbsp;Clone + 'a&gt; Clone for Blocks&lt;'a, B&gt;","synthetic":false,"types":[]}];
implementors["byteorder"] = [{"text":"impl Clone for BigEndian","synthetic":false,"types":[]},{"text":"impl Clone for LittleEndian","synthetic":false,"types":[]}];
implementors["bytes"] = [{"text":"impl Clone for BytesMut","synthetic":false,"types":[]},{"text":"impl Clone for Bytes","synthetic":false,"types":[]}];
implementors["chrono"] = [{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LocalResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for FixedOffset","synthetic":false,"types":[]},{"text":"impl Clone for Utc","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDate","synthetic":false,"types":[]},{"text":"impl Clone for IsoWeek","synthetic":false,"types":[]},{"text":"impl Clone for NaiveTime","synthetic":false,"types":[]},{"text":"impl Clone for NaiveDateTime","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for SecondsFormat","synthetic":false,"types":[]},{"text":"impl&lt;Tz:&nbsp;Clone + TimeZone&gt; Clone for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Tz::Offset: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Pad","synthetic":false,"types":[]},{"text":"impl Clone for Numeric","synthetic":false,"types":[]},{"text":"impl Clone for InternalNumeric","synthetic":false,"types":[]},{"text":"impl Clone for Fixed","synthetic":false,"types":[]},{"text":"impl Clone for InternalFixed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Item&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for Parsed","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for StrftimeItems&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Weekday","synthetic":false,"types":[]},{"text":"impl Clone for ParseWeekdayError","synthetic":false,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Clone for Hasher","synthetic":false,"types":[]}];
implementors["deflate"] = [{"text":"impl Clone for Compression","synthetic":false,"types":[]},{"text":"impl Clone for SpecialOptions","synthetic":false,"types":[]},{"text":"impl Clone for CompressionOptions","synthetic":false,"types":[]},{"text":"impl Clone for MatchingType","synthetic":false,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L:&nbsp;Clone, R:&nbsp;Clone&gt; Clone for Either&lt;L, R&gt;","synthetic":false,"types":[]}];
implementors["env_logger"] = [{"text":"impl Clone for Style","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for Target","synthetic":false,"types":[]},{"text":"impl Clone for WriteStyle","synthetic":false,"types":[]},{"text":"impl Clone for TimestampPrecision","synthetic":false,"types":[]}];
implementors["gbdt"] = [{"text":"impl Clone for Loss","synthetic":false,"types":[]},{"text":"impl Clone for Config","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for FileFormat","synthetic":false,"types":[]},{"text":"impl Clone for InputFormat","synthetic":false,"types":[]}];
implementors["getrandom"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["gif"] = [{"text":"impl Clone for DisposalMethod","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for Extension","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Frame&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CollectionAllocErr","synthetic":false,"types":[]}];
implementors["hashbrown_tstd"] = [{"text":"impl&lt;K:&nbsp;Clone, V:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashMap&lt;K, V, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Iter&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Keys&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, V, '_&gt; Clone for Values&lt;'_, K, V&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, S:&nbsp;Clone&gt; Clone for HashSet&lt;T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;K, '_&gt; Clone for Iter&lt;'_, K&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Intersection&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Difference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for SymmetricDifference&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, S, '_&gt; Clone for Union&lt;'_, T, S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TryReserveError","synthetic":false,"types":[]}];
implementors["hex"] = [{"text":"impl Clone for FromHexError","synthetic":false,"types":[]}];
implementors["http"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HeaderMap&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for HeaderName","synthetic":false,"types":[]},{"text":"impl Clone for HeaderValue","synthetic":false,"types":[]},{"text":"impl Clone for Method","synthetic":false,"types":[]},{"text":"impl Clone for StatusCode","synthetic":false,"types":[]},{"text":"impl Clone for Authority","synthetic":false,"types":[]},{"text":"impl Clone for PathAndQuery","synthetic":false,"types":[]},{"text":"impl Clone for Scheme","synthetic":false,"types":[]},{"text":"impl Clone for Uri","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]}];
implementors["httparse"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Status&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParserConfig","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Header&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["humantime"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for FormattedDuration","synthetic":false,"types":[]},{"text":"impl Clone for Duration","synthetic":false,"types":[]},{"text":"impl Clone for Timestamp","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Rfc3339Timestamp","synthetic":false,"types":[]}];
implementors["idna"] = [{"text":"impl Clone for Config","synthetic":false,"types":[]}];
implementors["image"] = [{"text":"impl Clone for Rect","synthetic":false,"types":[]},{"text":"impl Clone for BiLevel","synthetic":false,"types":[]},{"text":"impl Clone for FilterType","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Clone&gt; Clone for FlatSamples&lt;Buffer&gt;","synthetic":false,"types":[]},{"text":"impl Clone for SampleLayout","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Clone, P:&nbsp;Clone + Pixel&gt; Clone for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: AsRef&lt;[P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Buffer:&nbsp;Clone, P:&nbsp;Clone + Pixel&gt; Clone for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: AsMut&lt;[P::Subpixel]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for NormalForm","synthetic":false,"types":[]},{"text":"impl Clone for DXTVariant","synthetic":false,"types":[]},{"text":"impl Clone for SampleEncoding","synthetic":false,"types":[]},{"text":"impl Clone for PNMSubtype","synthetic":false,"types":[]},{"text":"impl Clone for BitmapHeader","synthetic":false,"types":[]},{"text":"impl Clone for GraymapHeader","synthetic":false,"types":[]},{"text":"impl Clone for PixmapHeader","synthetic":false,"types":[]},{"text":"impl Clone for ArbitraryHeader","synthetic":false,"types":[]},{"text":"impl Clone for ArbitraryTuplType","synthetic":false,"types":[]},{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl Clone for Frame","synthetic":false,"types":[]},{"text":"impl&lt;P, Container&gt; Clone for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Pixel,<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Deref&lt;Target = [P::Subpixel]&gt; + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for ColorType","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Rgb&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Bgr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Luma&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Rgba&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for Bgra&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Primitive&gt; Clone for LumaA&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for DynamicImage","synthetic":false,"types":[]},{"text":"impl Clone for ImageFormat","synthetic":false,"types":[]},{"text":"impl Clone for ImageOutputFormat","synthetic":false,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Interleave&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Batching&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Step&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J, F&gt; Clone for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Iterator&lt;Item = I::Item&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;I&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Peekable&lt;J&gt;: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, Pred:&nbsp;Clone&gt; Clone for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for WhileSome&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for EitherOrBoth&lt;A, B&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I, J&gt; Clone for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Clone + Iterator&lt;Item = J&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, I:&nbsp;Clone&gt; Clone for Format&lt;'a, I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for MinMaxResult&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for PadUsing&lt;I, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Unfold&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;St:&nbsp;Clone, F:&nbsp;Clone&gt; Clone for Iterate&lt;St, F&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Position&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, J:&nbsp;Clone&gt; Clone for ZipEq&lt;I, J&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, U:&nbsp;Clone&gt; Clone for ZipLongest&lt;T, U&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Zip&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FoldWhile&lt;T&gt;","synthetic":false,"types":[]}];
implementors["itoa"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl Clone for PixelFormat","synthetic":false,"types":[]},{"text":"impl Clone for ImageInfo","synthetic":false,"types":[]}];
implementors["jsonwebtoken"] = [{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for DecodingKey&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EncodingKey","synthetic":false,"types":[]},{"text":"impl Clone for Header","synthetic":false,"types":[]},{"text":"impl Clone for Validation","synthetic":false,"types":[]}];
implementors["libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for group","synthetic":false,"types":[]},{"text":"impl Clone for utimbuf","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for rlimit","synthetic":false,"types":[]},{"text":"impl Clone for rusage","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for itimerval","synthetic":false,"types":[]},{"text":"impl Clone for tms","synthetic":false,"types":[]},{"text":"impl Clone for servent","synthetic":false,"types":[]},{"text":"impl Clone for protoent","synthetic":false,"types":[]},{"text":"impl Clone for FILE","synthetic":false,"types":[]},{"text":"impl Clone for fpos_t","synthetic":false,"types":[]},{"text":"impl Clone for timezone","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq_source","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for sched_param","synthetic":false,"types":[]},{"text":"impl Clone for Dl_info","synthetic":false,"types":[]},{"text":"impl Clone for lconv","synthetic":false,"types":[]},{"text":"impl Clone for in_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for ifaddrs","synthetic":false,"types":[]},{"text":"impl Clone for in6_rtmsg","synthetic":false,"types":[]},{"text":"impl Clone for arpreq","synthetic":false,"types":[]},{"text":"impl Clone for arpreq_old","synthetic":false,"types":[]},{"text":"impl Clone for arphdr","synthetic":false,"types":[]},{"text":"impl Clone for mmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for utsname","synthetic":false,"types":[]},{"text":"impl Clone for sigevent","synthetic":false,"types":[]},{"text":"impl Clone for fpos64_t","synthetic":false,"types":[]},{"text":"impl Clone for rlimit64","synthetic":false,"types":[]},{"text":"impl Clone for glob_t","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for spwd","synthetic":false,"types":[]},{"text":"impl Clone for dqblk","synthetic":false,"types":[]},{"text":"impl Clone for signalfd_siginfo","synthetic":false,"types":[]},{"text":"impl Clone for itimerspec","synthetic":false,"types":[]},{"text":"impl Clone for fsid_t","synthetic":false,"types":[]},{"text":"impl Clone for packet_mreq","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for if_nameindex","synthetic":false,"types":[]},{"text":"impl Clone for msginfo","synthetic":false,"types":[]},{"text":"impl Clone for sembuf","synthetic":false,"types":[]},{"text":"impl Clone for input_event","synthetic":false,"types":[]},{"text":"impl Clone for input_id","synthetic":false,"types":[]},{"text":"impl Clone for input_absinfo","synthetic":false,"types":[]},{"text":"impl Clone for input_keymap_entry","synthetic":false,"types":[]},{"text":"impl Clone for input_mask","synthetic":false,"types":[]},{"text":"impl Clone for ff_replay","synthetic":false,"types":[]},{"text":"impl Clone for ff_trigger","synthetic":false,"types":[]},{"text":"impl Clone for ff_envelope","synthetic":false,"types":[]},{"text":"impl Clone for ff_constant_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_ramp_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_condition_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_periodic_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_rumble_effect","synthetic":false,"types":[]},{"text":"impl Clone for ff_effect","synthetic":false,"types":[]},{"text":"impl Clone for uinput_ff_upload","synthetic":false,"types":[]},{"text":"impl Clone for uinput_ff_erase","synthetic":false,"types":[]},{"text":"impl Clone for uinput_abs_setup","synthetic":false,"types":[]},{"text":"impl Clone for dl_phdr_info","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Ehdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Sym","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Phdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Shdr","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for mntent","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawn_file_actions_t","synthetic":false,"types":[]},{"text":"impl Clone for posix_spawnattr_t","synthetic":false,"types":[]},{"text":"impl Clone for genlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for in6_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for arpd_request","synthetic":false,"types":[]},{"text":"impl Clone for inotify_event","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_response","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_vm","synthetic":false,"types":[]},{"text":"impl Clone for regmatch_t","synthetic":false,"types":[]},{"text":"impl Clone for sock_extended_err","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_tp","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_j1939","synthetic":false,"types":[]},{"text":"impl Clone for can_filter","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_alg","synthetic":false,"types":[]},{"text":"impl Clone for uinput_setup","synthetic":false,"types":[]},{"text":"impl Clone for uinput_user_dev","synthetic":false,"types":[]},{"text":"impl Clone for af_alg_iv","synthetic":false,"types":[]},{"text":"impl Clone for mq_attr","synthetic":false,"types":[]},{"text":"impl Clone for __c_anonymous_sockaddr_can_can_addr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_can","synthetic":false,"types":[]},{"text":"impl Clone for statx","synthetic":false,"types":[]},{"text":"impl Clone for statx_timestamp","synthetic":false,"types":[]},{"text":"impl Clone for aiocb","synthetic":false,"types":[]},{"text":"impl Clone for __exit_status","synthetic":false,"types":[]},{"text":"impl Clone for __timeval","synthetic":false,"types":[]},{"text":"impl Clone for glob64_t","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for termios","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo","synthetic":false,"types":[]},{"text":"impl Clone for mallinfo2","synthetic":false,"types":[]},{"text":"impl Clone for nlmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for nlmsgerr","synthetic":false,"types":[]},{"text":"impl Clone for nl_pktinfo","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_req","synthetic":false,"types":[]},{"text":"impl Clone for nl_mmap_hdr","synthetic":false,"types":[]},{"text":"impl Clone for nlattr","synthetic":false,"types":[]},{"text":"impl Clone for rtentry","synthetic":false,"types":[]},{"text":"impl Clone for timex","synthetic":false,"types":[]},{"text":"impl Clone for ntptimeval","synthetic":false,"types":[]},{"text":"impl Clone for regex_t","synthetic":false,"types":[]},{"text":"impl Clone for Elf64_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for Elf32_Chdr","synthetic":false,"types":[]},{"text":"impl Clone for utmpx","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sysinfo","synthetic":false,"types":[]},{"text":"impl Clone for msqid_ds","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for statfs","synthetic":false,"types":[]},{"text":"impl Clone for flock","synthetic":false,"types":[]},{"text":"impl Clone for flock64","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]},{"text":"impl Clone for stack_t","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for statfs64","synthetic":false,"types":[]},{"text":"impl Clone for statvfs64","synthetic":false,"types":[]},{"text":"impl Clone for pthread_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpxreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_xmmreg","synthetic":false,"types":[]},{"text":"impl Clone for _libc_fpstate","synthetic":false,"types":[]},{"text":"impl Clone for user_regs_struct","synthetic":false,"types":[]},{"text":"impl Clone for user","synthetic":false,"types":[]},{"text":"impl Clone for mcontext_t","synthetic":false,"types":[]},{"text":"impl Clone for ipc_perm","synthetic":false,"types":[]},{"text":"impl Clone for shmid_ds","synthetic":false,"types":[]},{"text":"impl Clone for termios2","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreqn","synthetic":false,"types":[]},{"text":"impl Clone for user_fpregs_struct","synthetic":false,"types":[]},{"text":"impl Clone for ucontext_t","synthetic":false,"types":[]},{"text":"impl Clone for statvfs","synthetic":false,"types":[]},{"text":"impl Clone for max_align_t","synthetic":false,"types":[]},{"text":"impl Clone for sem_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutexattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_condattr_t","synthetic":false,"types":[]},{"text":"impl Clone for fanotify_event_metadata","synthetic":false,"types":[]},{"text":"impl Clone for pthread_cond_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_mutex_t","synthetic":false,"types":[]},{"text":"impl Clone for pthread_rwlock_t","synthetic":false,"types":[]},{"text":"impl Clone for can_frame","synthetic":false,"types":[]},{"text":"impl Clone for canfd_frame","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]}];
implementors["log"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for LevelFilter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Record&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Metadata&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Clone for CompressionStrategy","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLFlush","synthetic":false,"types":[]},{"text":"impl Clone for TDEFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for CompressionLevel","synthetic":false,"types":[]},{"text":"impl Clone for TINFLStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZFlush","synthetic":false,"types":[]},{"text":"impl Clone for MZStatus","synthetic":false,"types":[]},{"text":"impl Clone for MZError","synthetic":false,"types":[]},{"text":"impl Clone for DataFormat","synthetic":false,"types":[]},{"text":"impl Clone for StreamResult","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Clone for Sign","synthetic":false,"types":[]},{"text":"impl Clone for BigInt","synthetic":false,"types":[]},{"text":"impl Clone for BigUint","synthetic":false,"types":[]},{"text":"impl Clone for ParseBigIntError","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for ExtendedGcd&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for Range&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeInclusive&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStep&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for RangeStepInclusive&lt;A&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ParseRatioError","synthetic":false,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OnceCell&lt;T&gt;","synthetic":false,"types":[]}];
implementors["pem"] = [{"text":"impl Clone for LineEnding","synthetic":false,"types":[]},{"text":"impl Clone for EncodeConfig","synthetic":false,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl&lt;'a&gt; Clone for PercentEncode&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PercentDecode&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for FilterType","synthetic":false,"types":[]},{"text":"impl Clone for ColorType","synthetic":false,"types":[]},{"text":"impl Clone for BitDepth","synthetic":false,"types":[]},{"text":"impl Clone for PixelDimensions","synthetic":false,"types":[]},{"text":"impl Clone for Unit","synthetic":false,"types":[]},{"text":"impl Clone for DisposeOp","synthetic":false,"types":[]},{"text":"impl Clone for BlendOp","synthetic":false,"types":[]},{"text":"impl Clone for FrameControl","synthetic":false,"types":[]},{"text":"impl Clone for AnimationControl","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]},{"text":"impl Clone for Transformations","synthetic":false,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Clone for YesS3","synthetic":false,"types":[]},{"text":"impl Clone for NoS3","synthetic":false,"types":[]},{"text":"impl Clone for YesS4","synthetic":false,"types":[]},{"text":"impl Clone for NoS4","synthetic":false,"types":[]},{"text":"impl Clone for YesA1","synthetic":false,"types":[]},{"text":"impl Clone for NoA1","synthetic":false,"types":[]},{"text":"impl Clone for YesA2","synthetic":false,"types":[]},{"text":"impl Clone for NoA2","synthetic":false,"types":[]},{"text":"impl Clone for YesNI","synthetic":false,"types":[]},{"text":"impl Clone for NoNI","synthetic":false,"types":[]},{"text":"impl&lt;S3:&nbsp;Clone, S4:&nbsp;Clone, NI:&nbsp;Clone&gt; Clone for SseMachine&lt;S3, S4, NI&gt;","synthetic":false,"types":[]},{"text":"impl&lt;NI:&nbsp;Clone&gt; Clone for Avx2Machine&lt;NI&gt;","synthetic":false,"types":[]},{"text":"impl Clone for vec128_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec256_storage","synthetic":false,"types":[]},{"text":"impl Clone for vec512_storage","synthetic":false,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Clone for TokenStream","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for TokenTree","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for Delimiter","synthetic":false,"types":[]},{"text":"impl Clone for Punct","synthetic":false,"types":[]},{"text":"impl Clone for Spacing","synthetic":false,"types":[]},{"text":"impl Clone for Ident","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for IntoIter","synthetic":false,"types":[]}];
implementors["prost"] = [{"text":"impl Clone for DecodeError","synthetic":false,"types":[]},{"text":"impl Clone for EncodeError","synthetic":false,"types":[]}];
implementors["protected_fs"] = [{"text":"impl Clone for OpenOptions","synthetic":false,"types":[]}];
implementors["rand"] = [{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for BernoulliError","synthetic":false,"types":[]},{"text":"impl Clone for Binomial","synthetic":false,"types":[]},{"text":"impl Clone for Cauchy","synthetic":false,"types":[]},{"text":"impl Clone for Dirichlet","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for Beta","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Pareto","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for Triangular","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform&gt; Clone for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformInt&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for UniformFloat&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UniformDuration","synthetic":false,"types":[]},{"text":"impl Clone for UnitCircle","synthetic":false,"types":[]},{"text":"impl Clone for UnitSphereSurface","synthetic":false,"types":[]},{"text":"impl Clone for Weibull","synthetic":false,"types":[]},{"text":"impl&lt;W:&nbsp;Weight&gt; Clone for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Uniform&lt;W&gt;: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;X:&nbsp;Clone + SampleUniform + PartialOrd&gt; Clone for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X::Sampler: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for WeightedError","synthetic":false,"types":[]},{"text":"impl Clone for OpenClosed01","synthetic":false,"types":[]},{"text":"impl Clone for Open01","synthetic":false,"types":[]},{"text":"impl Clone for Standard","synthetic":false,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Clone for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: BlockRngCore + SeedableRng + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: RngCore + Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for StepRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]},{"text":"impl Clone for IndexVec","synthetic":false,"types":[]},{"text":"impl Clone for IndexVecIntoIter","synthetic":false,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Clone for ChaCha20Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha20Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha12Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Core","synthetic":false,"types":[]},{"text":"impl Clone for ChaCha8Rng","synthetic":false,"types":[]}];
implementors["rand_core"] = [{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + BlockRngCore + ?Sized&gt; Clone for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R::Results: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for OsRng","synthetic":false,"types":[]}];
implementors["rdrand"] = [{"text":"impl Clone for RdRand","synthetic":false,"types":[]},{"text":"impl Clone for RdSeed","synthetic":false,"types":[]}];
implementors["regex"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for RegexSet","synthetic":false,"types":[]},{"text":"impl Clone for SetMatches","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SetMatchesIter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'t&gt; Clone for Match&lt;'t&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Regex","synthetic":false,"types":[]},{"text":"impl Clone for CaptureLocations","synthetic":false,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Span","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl Clone for WithComments","synthetic":false,"types":[]},{"text":"impl Clone for Comment","synthetic":false,"types":[]},{"text":"impl Clone for Ast","synthetic":false,"types":[]},{"text":"impl Clone for Alternation","synthetic":false,"types":[]},{"text":"impl Clone for Concat","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for LiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for SpecialLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for HexLiteralKind","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerl","synthetic":false,"types":[]},{"text":"impl Clone for ClassPerlKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassAscii","synthetic":false,"types":[]},{"text":"impl Clone for ClassAsciiKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeOpKind","synthetic":false,"types":[]},{"text":"impl Clone for ClassBracketed","synthetic":false,"types":[]},{"text":"impl Clone for ClassSet","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetItem","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetUnion","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOp","synthetic":false,"types":[]},{"text":"impl Clone for ClassSetBinaryOpKind","synthetic":false,"types":[]},{"text":"impl Clone for Assertion","synthetic":false,"types":[]},{"text":"impl Clone for AssertionKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionOp","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for CaptureName","synthetic":false,"types":[]},{"text":"impl Clone for SetFlags","synthetic":false,"types":[]},{"text":"impl Clone for Flags","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItem","synthetic":false,"types":[]},{"text":"impl Clone for FlagsItemKind","synthetic":false,"types":[]},{"text":"impl Clone for Flag","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Literals","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for TranslatorBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Translator","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for Hir","synthetic":false,"types":[]},{"text":"impl Clone for HirKind","synthetic":false,"types":[]},{"text":"impl Clone for Literal","synthetic":false,"types":[]},{"text":"impl Clone for Class","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicode","synthetic":false,"types":[]},{"text":"impl Clone for ClassUnicodeRange","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytes","synthetic":false,"types":[]},{"text":"impl Clone for ClassBytesRange","synthetic":false,"types":[]},{"text":"impl Clone for Anchor","synthetic":false,"types":[]},{"text":"impl Clone for WordBoundary","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl Clone for GroupKind","synthetic":false,"types":[]},{"text":"impl Clone for Repetition","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionKind","synthetic":false,"types":[]},{"text":"impl Clone for RepetitionRange","synthetic":false,"types":[]},{"text":"impl Clone for ParserBuilder","synthetic":false,"types":[]},{"text":"impl Clone for Parser","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Sequence","synthetic":false,"types":[]},{"text":"impl Clone for Utf8Range","synthetic":false,"types":[]}];
implementors["ring"] = [{"text":"impl Clone for PublicKey","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Positive&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for Digest","synthetic":false,"types":[]},{"text":"impl Clone for Unspecified","synthetic":false,"types":[]},{"text":"impl Clone for KeyRejected","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for Prk","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for Key","synthetic":false,"types":[]},{"text":"impl Clone for Context","synthetic":false,"types":[]},{"text":"impl Clone for Algorithm","synthetic":false,"types":[]},{"text":"impl Clone for SystemRandom","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt; + Debug,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for RsaSubjectPublicKey","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl&lt;B:&nbsp;Clone&gt; Clone for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AsRef&lt;[u8]&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["rulinalg"] = [{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AbsoluteElementwiseComparator&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ExactElementwiseComparator","synthetic":false,"types":[]},{"text":"impl Clone for UlpElementwiseComparator","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FloatElementwiseComparator&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for QR&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for ThinQR&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for HouseholderQr&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Cholesky&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LUP&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PartialPivLu&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for LUPQ&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for FullPivLu&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone&gt; Clone for HouseholderComposition&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: 'a,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for PermutationMatrix&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Parity","synthetic":false,"types":[]},{"text":"impl Clone for Axes","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Matrix&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + 'a&gt; Clone for MatrixSlice&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + 'a&gt; Clone for Row&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + 'a&gt; Clone for Column&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Vector&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for UlpComparisonResult","synthetic":false,"types":[]}];
implementors["rustface"] = [{"text":"impl Clone for FaceInfo","synthetic":false,"types":[]}];
implementors["rustls"] = [{"text":"impl Clone for Payload","synthetic":false,"types":[]},{"text":"impl Clone for PayloadU24","synthetic":false,"types":[]},{"text":"impl Clone for PayloadU16","synthetic":false,"types":[]},{"text":"impl Clone for PayloadU8","synthetic":false,"types":[]},{"text":"impl Clone for ProtocolVersion","synthetic":false,"types":[]},{"text":"impl Clone for HashAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for SignatureAlgorithm","synthetic":false,"types":[]},{"text":"impl Clone for ClientCertificateType","synthetic":false,"types":[]},{"text":"impl Clone for Compression","synthetic":false,"types":[]},{"text":"impl Clone for ContentType","synthetic":false,"types":[]},{"text":"impl Clone for HandshakeType","synthetic":false,"types":[]},{"text":"impl Clone for AlertLevel","synthetic":false,"types":[]},{"text":"impl Clone for AlertDescription","synthetic":false,"types":[]},{"text":"impl Clone for HeartbeatMessageType","synthetic":false,"types":[]},{"text":"impl Clone for ExtensionType","synthetic":false,"types":[]},{"text":"impl Clone for ServerNameType","synthetic":false,"types":[]},{"text":"impl Clone for NamedCurve","synthetic":false,"types":[]},{"text":"impl Clone for NamedGroup","synthetic":false,"types":[]},{"text":"impl Clone for CipherSuite","synthetic":false,"types":[]},{"text":"impl Clone for ECPointFormat","synthetic":false,"types":[]},{"text":"impl Clone for HeartbeatMode","synthetic":false,"types":[]},{"text":"impl Clone for ECCurveType","synthetic":false,"types":[]},{"text":"impl Clone for SignatureScheme","synthetic":false,"types":[]},{"text":"impl Clone for PSKKeyExchangeMode","synthetic":false,"types":[]},{"text":"impl Clone for KeyUpdateRequest","synthetic":false,"types":[]},{"text":"impl Clone for CertificateStatusType","synthetic":false,"types":[]},{"text":"impl Clone for Random","synthetic":false,"types":[]},{"text":"impl Clone for SessionID","synthetic":false,"types":[]},{"text":"impl Clone for UnknownExtension","synthetic":false,"types":[]},{"text":"impl Clone for ServerNamePayload","synthetic":false,"types":[]},{"text":"impl Clone for ServerName","synthetic":false,"types":[]},{"text":"impl Clone for KeyShareEntry","synthetic":false,"types":[]},{"text":"impl Clone for PresharedKeyIdentity","synthetic":false,"types":[]},{"text":"impl Clone for PresharedKeyOffer","synthetic":false,"types":[]},{"text":"impl Clone for OCSPCertificateStatusRequest","synthetic":false,"types":[]},{"text":"impl Clone for CertificateStatusRequest","synthetic":false,"types":[]},{"text":"impl Clone for ClientExtension","synthetic":false,"types":[]},{"text":"impl Clone for ServerExtension","synthetic":false,"types":[]},{"text":"impl Clone for DigitallySignedStruct","synthetic":false,"types":[]},{"text":"impl Clone for TLSError","synthetic":false,"types":[]},{"text":"impl Clone for RootCertStore","synthetic":false,"types":[]},{"text":"impl Clone for ServerConfig","synthetic":false,"types":[]},{"text":"impl Clone for ClientConfig","synthetic":false,"types":[]},{"text":"impl Clone for PrivateKey","synthetic":false,"types":[]},{"text":"impl Clone for Certificate","synthetic":false,"types":[]},{"text":"impl Clone for CertifiedKey","synthetic":false,"types":[]}];
implementors["rusty_leveldb"] = [{"text":"impl Clone for DefaultCmp","synthetic":false,"types":[]},{"text":"impl Clone for PosixDiskEnv","synthetic":false,"types":[]},{"text":"impl Clone for StatusCode","synthetic":false,"types":[]},{"text":"impl Clone for Status","synthetic":false,"types":[]},{"text":"impl Clone for BloomPolicy","synthetic":false,"types":[]},{"text":"impl Clone for CompressionType","synthetic":false,"types":[]},{"text":"impl Clone for Options","synthetic":false,"types":[]}];
implementors["rusty_machine"] = [{"text":"impl Clone for Logit","synthetic":false,"types":[]},{"text":"impl Clone for Log","synthetic":false,"types":[]},{"text":"impl Clone for Identity","synthetic":false,"types":[]},{"text":"impl Clone for Bernoulli","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for Poisson","synthetic":false,"types":[]},{"text":"impl Clone for CovOption","synthetic":false,"types":[]},{"text":"impl Clone for Linear","synthetic":false,"types":[]},{"text":"impl Clone for BCECriterion","synthetic":false,"types":[]},{"text":"impl Clone for MSECriterion","synthetic":false,"types":[]},{"text":"impl Clone for ConstMean","synthetic":false,"types":[]},{"text":"impl Clone for GradientDesc","synthetic":false,"types":[]},{"text":"impl Clone for StochasticGD","synthetic":false,"types":[]},{"text":"impl Clone for RMSProp","synthetic":false,"types":[]},{"text":"impl Clone for ConjugateGD","synthetic":false,"types":[]},{"text":"impl Clone for Sigmoid","synthetic":false,"types":[]},{"text":"impl Clone for Linear","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl Clone for Tanh","synthetic":false,"types":[]},{"text":"impl Clone for MeanSqError","synthetic":false,"types":[]},{"text":"impl Clone for CrossEntropyError","synthetic":false,"types":[]},{"text":"impl Clone for Linear","synthetic":false,"types":[]},{"text":"impl Clone for Polynomial","synthetic":false,"types":[]},{"text":"impl Clone for SquaredExp","synthetic":false,"types":[]},{"text":"impl Clone for Exponential","synthetic":false,"types":[]},{"text":"impl Clone for HyperTan","synthetic":false,"types":[]},{"text":"impl Clone for Multiquadric","synthetic":false,"types":[]},{"text":"impl Clone for RationalQuadratic","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Float&gt; Clone for Regularization&lt;T&gt;","synthetic":false,"types":[]}];
implementors["ryu"] = [{"text":"impl Clone for Buffer","synthetic":false,"types":[]}];
implementors["sct"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["serde"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UnitDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for BoolDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for IsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U8Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U16Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for UsizeDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for F64Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for CharDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for I128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U128Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for U32Deserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for StrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;E&gt; Clone for StringDeserializer&lt;E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, E&gt; Clone for CowStrDeserializer&lt;'a, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, E&gt; Clone for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone, E:&nbsp;Clone&gt; Clone for SeqDeserializer&lt;I, E&gt;","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for SeqAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'de, I, E&gt; Clone for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Iterator + Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;I::Item: Pair,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I::Item as Pair&gt;::Second: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Clone&gt; Clone for MapAccessDeserializer&lt;A&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IgnoredAny","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Unexpected&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["serde_json"] = [{"text":"impl Clone for Category","synthetic":false,"types":[]},{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for CompactFormatter","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for PrettyFormatter&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Number","synthetic":false,"types":[]}];
implementors["sgx_alloc"] = [{"text":"impl Clone for AlignReq","synthetic":false,"types":[]},{"text":"impl Clone for AlighAllocErr","synthetic":false,"types":[]},{"text":"impl Clone for AlignLayoutErr","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for AlignBox&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for ProtectAttr","synthetic":false,"types":[]},{"text":"impl Clone for RsrvMemAllocErr","synthetic":false,"types":[]}];
implementors["sgx_demangle"] = [{"text":"impl Clone for TryDemangleError","synthetic":false,"types":[]}];
implementors["sgx_libc"] = [{"text":"impl Clone for DIR","synthetic":false,"types":[]},{"text":"impl Clone for stat","synthetic":false,"types":[]},{"text":"impl Clone for stat64","synthetic":false,"types":[]},{"text":"impl Clone for timeval","synthetic":false,"types":[]},{"text":"impl Clone for timespec","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_in6","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_un","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_storage","synthetic":false,"types":[]},{"text":"impl Clone for addrinfo","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_nl","synthetic":false,"types":[]},{"text":"impl Clone for sockaddr_ll","synthetic":false,"types":[]},{"text":"impl Clone for fd_set","synthetic":false,"types":[]},{"text":"impl Clone for tm","synthetic":false,"types":[]},{"text":"impl Clone for epoll_event","synthetic":false,"types":[]},{"text":"impl Clone for in_addr","synthetic":false,"types":[]},{"text":"impl Clone for in6_addr","synthetic":false,"types":[]},{"text":"impl Clone for ip_mreq","synthetic":false,"types":[]},{"text":"impl Clone for ipv6_mreq","synthetic":false,"types":[]},{"text":"impl Clone for hostent","synthetic":false,"types":[]},{"text":"impl Clone for iovec","synthetic":false,"types":[]},{"text":"impl Clone for pollfd","synthetic":false,"types":[]},{"text":"impl Clone for winsize","synthetic":false,"types":[]},{"text":"impl Clone for linger","synthetic":false,"types":[]},{"text":"impl Clone for sigval","synthetic":false,"types":[]},{"text":"impl Clone for msghdr","synthetic":false,"types":[]},{"text":"impl Clone for cmsghdr","synthetic":false,"types":[]},{"text":"impl Clone for dirent","synthetic":false,"types":[]},{"text":"impl Clone for dirent64","synthetic":false,"types":[]},{"text":"impl Clone for passwd","synthetic":false,"types":[]},{"text":"impl Clone for cpu_set_t","synthetic":false,"types":[]},{"text":"impl Clone for ucred","synthetic":false,"types":[]},{"text":"impl Clone for pthread_once_t","synthetic":false,"types":[]},{"text":"impl Clone for sigset_t","synthetic":false,"types":[]},{"text":"impl Clone for sigaction","synthetic":false,"types":[]},{"text":"impl Clone for siginfo_t","synthetic":false,"types":[]}];
implementors["sgx_rand"] = [{"text":"impl&lt;X:&nbsp;Clone&gt; Clone for Range&lt;X&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Gamma","synthetic":false,"types":[]},{"text":"impl Clone for ChiSquared","synthetic":false,"types":[]},{"text":"impl Clone for FisherF","synthetic":false,"types":[]},{"text":"impl Clone for StudentT","synthetic":false,"types":[]},{"text":"impl Clone for StandardNormal","synthetic":false,"types":[]},{"text":"impl Clone for Normal","synthetic":false,"types":[]},{"text":"impl Clone for LogNormal","synthetic":false,"types":[]},{"text":"impl Clone for Exp1","synthetic":false,"types":[]},{"text":"impl Clone for Exp","synthetic":false,"types":[]},{"text":"impl&lt;Sup&gt; Clone for RandSample&lt;Sup&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Weighted&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for IsaacRng","synthetic":false,"types":[]},{"text":"impl Clone for Isaac64Rng","synthetic":false,"types":[]},{"text":"impl Clone for ChaChaRng","synthetic":false,"types":[]},{"text":"impl Clone for ReseedWithDefault","synthetic":false,"types":[]},{"text":"impl Clone for XorShiftRng","synthetic":false,"types":[]},{"text":"impl Clone for StdRng","synthetic":false,"types":[]},{"text":"impl Clone for ThreadRng","synthetic":false,"types":[]}];
implementors["sgx_tprotected_fs"] = [{"text":"impl Clone for SeekFrom","synthetic":false,"types":[]}];
implementors["sgx_trts"] = [{"text":"impl Clone for CString","synthetic":false,"types":[]},{"text":"impl Clone for NulError","synthetic":false,"types":[]},{"text":"impl Clone for FromBytesWithNulError","synthetic":false,"types":[]},{"text":"impl Clone for IntoStringError","synthetic":false,"types":[]},{"text":"impl Clone for Box&lt;CStr&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Feature","synthetic":false,"types":[]},{"text":"impl Clone for SgxGlobalData","synthetic":false,"types":[]},{"text":"impl Clone for SgxThreadData","synthetic":false,"types":[]},{"text":"impl Clone for SgxThreadPolicy","synthetic":false,"types":[]}];
implementors["sgx_types"] = [{"text":"impl Clone for sgx_attributes_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_misc_attribute_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_msg1_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_msg2_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_msg3_body_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_msg3_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_session_enclave_identity_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_session_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_dh_session_role_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ecc_param_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_cpu_svn_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_key_id_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_key_request_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ra_key_type_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ra_msg1_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ra_msg2_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ps_sec_prop_desc_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ra_msg3_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_spid_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_basename_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_quote_nonce_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_update_info_bit_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_quote_sign_type_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_quote_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_platform_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_att_key_id_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_att_key_id_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_att_key_id_ext_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_qe_report_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_measurement_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_report_data_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_target_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_report_body_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_report_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ec256_dh_shared_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ec256_private_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ec256_public_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ec256_signature_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_rsa3072_public_key_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_rsa3072_key_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_rsa3072_signature_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_generic_ecresult_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_rsa_result_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_rsa_key_type_t","synthetic":false,"types":[]},{"text":"impl Clone for rsa_params_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_thread_mutex_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_thread_rwlockattr_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_thread_cond_attr_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_exception_vector_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_exception_type_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_cpu_context_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_exception_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_aes_gcm_data_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_sealed_data_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ps_cap_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_kss_config_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_device_status_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_uswitchless_worker_type_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_uswitchless_worker_event_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_uswitchless_worker_stats_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_request_policy_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_pce_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_qe3_id_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_config_version_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_attestation_algorithm_id_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_cert_key_type_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_ppid_rsa3072_encrypted_cert_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_auth_data_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_certification_data_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_ecdsa_sig_data_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_quote_header_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_quote3_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_qe_report_info_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_path_type_t","synthetic":false,"types":[]},{"text":"impl Clone for pck_cert_flag_enum_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_qv_supplemental_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_qv_path_type_t","synthetic":false,"types":[]},{"text":"impl Clone for align_req_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_align_key_128bit_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_align_mac_128bit_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_align_key_256bit_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_align_mac_256bit_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_align_ec256_dh_shared_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_align_ec256_private_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_status_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_pce_error_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_quote3_error_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_qcnl_error_t","synthetic":false,"types":[]},{"text":"impl Clone for sgx_ql_qv_result_t","synthetic":false,"types":[]},{"text":"impl Clone for data_directory_t","synthetic":false,"types":[]},{"text":"impl Clone for dir_index_t","synthetic":false,"types":[]},{"text":"impl Clone for layout_entry_t","synthetic":false,"types":[]},{"text":"impl Clone for layout_group_t","synthetic":false,"types":[]}];
implementors["sgx_unwind"] = [{"text":"impl Clone for _Unwind_Reason_Code","synthetic":false,"types":[]},{"text":"impl Clone for _Unwind_Action","synthetic":false,"types":[]}];
implementors["simple_asn1"] = [{"text":"impl Clone for ASN1Class","synthetic":false,"types":[]},{"text":"impl Clone for ASN1Block","synthetic":false,"types":[]},{"text":"impl Clone for OID","synthetic":false,"types":[]},{"text":"impl Clone for ASN1DecodeErr","synthetic":false,"types":[]},{"text":"impl Clone for ASN1EncodeErr","synthetic":false,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;A:&nbsp;Array&gt; Clone for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;A:&nbsp;Array + Clone&gt; Clone for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A::Item: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
implementors["snap"] = [{"text":"impl Clone for Decoder","synthetic":false,"types":[]}];
implementors["syn"] = [{"text":"impl Clone for Underscore","synthetic":false,"types":[]},{"text":"impl Clone for Abstract","synthetic":false,"types":[]},{"text":"impl Clone for As","synthetic":false,"types":[]},{"text":"impl Clone for Async","synthetic":false,"types":[]},{"text":"impl Clone for Auto","synthetic":false,"types":[]},{"text":"impl Clone for Await","synthetic":false,"types":[]},{"text":"impl Clone for Become","synthetic":false,"types":[]},{"text":"impl Clone for Box","synthetic":false,"types":[]},{"text":"impl Clone for Break","synthetic":false,"types":[]},{"text":"impl Clone for Const","synthetic":false,"types":[]},{"text":"impl Clone for Continue","synthetic":false,"types":[]},{"text":"impl Clone for Crate","synthetic":false,"types":[]},{"text":"impl Clone for Default","synthetic":false,"types":[]},{"text":"impl Clone for Do","synthetic":false,"types":[]},{"text":"impl Clone for Dyn","synthetic":false,"types":[]},{"text":"impl Clone for Else","synthetic":false,"types":[]},{"text":"impl Clone for Enum","synthetic":false,"types":[]},{"text":"impl Clone for Extern","synthetic":false,"types":[]},{"text":"impl Clone for Final","synthetic":false,"types":[]},{"text":"impl Clone for Fn","synthetic":false,"types":[]},{"text":"impl Clone for For","synthetic":false,"types":[]},{"text":"impl Clone for If","synthetic":false,"types":[]},{"text":"impl Clone for Impl","synthetic":false,"types":[]},{"text":"impl Clone for In","synthetic":false,"types":[]},{"text":"impl Clone for Let","synthetic":false,"types":[]},{"text":"impl Clone for Loop","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for Match","synthetic":false,"types":[]},{"text":"impl Clone for Mod","synthetic":false,"types":[]},{"text":"impl Clone for Move","synthetic":false,"types":[]},{"text":"impl Clone for Mut","synthetic":false,"types":[]},{"text":"impl Clone for Override","synthetic":false,"types":[]},{"text":"impl Clone for Priv","synthetic":false,"types":[]},{"text":"impl Clone for Pub","synthetic":false,"types":[]},{"text":"impl Clone for Ref","synthetic":false,"types":[]},{"text":"impl Clone for Return","synthetic":false,"types":[]},{"text":"impl Clone for SelfType","synthetic":false,"types":[]},{"text":"impl Clone for SelfValue","synthetic":false,"types":[]},{"text":"impl Clone for Static","synthetic":false,"types":[]},{"text":"impl Clone for Struct","synthetic":false,"types":[]},{"text":"impl Clone for Super","synthetic":false,"types":[]},{"text":"impl Clone for Trait","synthetic":false,"types":[]},{"text":"impl Clone for Try","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Typeof","synthetic":false,"types":[]},{"text":"impl Clone for Union","synthetic":false,"types":[]},{"text":"impl Clone for Unsafe","synthetic":false,"types":[]},{"text":"impl Clone for Unsized","synthetic":false,"types":[]},{"text":"impl Clone for Use","synthetic":false,"types":[]},{"text":"impl Clone for Virtual","synthetic":false,"types":[]},{"text":"impl Clone for Where","synthetic":false,"types":[]},{"text":"impl Clone for While","synthetic":false,"types":[]},{"text":"impl Clone for Yield","synthetic":false,"types":[]},{"text":"impl Clone for Add","synthetic":false,"types":[]},{"text":"impl Clone for AddEq","synthetic":false,"types":[]},{"text":"impl Clone for And","synthetic":false,"types":[]},{"text":"impl Clone for AndAnd","synthetic":false,"types":[]},{"text":"impl Clone for AndEq","synthetic":false,"types":[]},{"text":"impl Clone for At","synthetic":false,"types":[]},{"text":"impl Clone for Bang","synthetic":false,"types":[]},{"text":"impl Clone for Caret","synthetic":false,"types":[]},{"text":"impl Clone for CaretEq","synthetic":false,"types":[]},{"text":"impl Clone for Colon","synthetic":false,"types":[]},{"text":"impl Clone for Colon2","synthetic":false,"types":[]},{"text":"impl Clone for Comma","synthetic":false,"types":[]},{"text":"impl Clone for Div","synthetic":false,"types":[]},{"text":"impl Clone for DivEq","synthetic":false,"types":[]},{"text":"impl Clone for Dollar","synthetic":false,"types":[]},{"text":"impl Clone for Dot","synthetic":false,"types":[]},{"text":"impl Clone for Dot2","synthetic":false,"types":[]},{"text":"impl Clone for Dot3","synthetic":false,"types":[]},{"text":"impl Clone for DotDotEq","synthetic":false,"types":[]},{"text":"impl Clone for Eq","synthetic":false,"types":[]},{"text":"impl Clone for EqEq","synthetic":false,"types":[]},{"text":"impl Clone for Ge","synthetic":false,"types":[]},{"text":"impl Clone for Gt","synthetic":false,"types":[]},{"text":"impl Clone for Le","synthetic":false,"types":[]},{"text":"impl Clone for Lt","synthetic":false,"types":[]},{"text":"impl Clone for MulEq","synthetic":false,"types":[]},{"text":"impl Clone for Ne","synthetic":false,"types":[]},{"text":"impl Clone for Or","synthetic":false,"types":[]},{"text":"impl Clone for OrEq","synthetic":false,"types":[]},{"text":"impl Clone for OrOr","synthetic":false,"types":[]},{"text":"impl Clone for Pound","synthetic":false,"types":[]},{"text":"impl Clone for Question","synthetic":false,"types":[]},{"text":"impl Clone for RArrow","synthetic":false,"types":[]},{"text":"impl Clone for LArrow","synthetic":false,"types":[]},{"text":"impl Clone for Rem","synthetic":false,"types":[]},{"text":"impl Clone for RemEq","synthetic":false,"types":[]},{"text":"impl Clone for FatArrow","synthetic":false,"types":[]},{"text":"impl Clone for Semi","synthetic":false,"types":[]},{"text":"impl Clone for Shl","synthetic":false,"types":[]},{"text":"impl Clone for ShlEq","synthetic":false,"types":[]},{"text":"impl Clone for Shr","synthetic":false,"types":[]},{"text":"impl Clone for ShrEq","synthetic":false,"types":[]},{"text":"impl Clone for Star","synthetic":false,"types":[]},{"text":"impl Clone for Sub","synthetic":false,"types":[]},{"text":"impl Clone for SubEq","synthetic":false,"types":[]},{"text":"impl Clone for Tilde","synthetic":false,"types":[]},{"text":"impl Clone for Brace","synthetic":false,"types":[]},{"text":"impl Clone for Bracket","synthetic":false,"types":[]},{"text":"impl Clone for Paren","synthetic":false,"types":[]},{"text":"impl Clone for Group","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ImplGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for TypeGenerics&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Turbofish&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Lifetime","synthetic":false,"types":[]},{"text":"impl Clone for LitStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByteStr","synthetic":false,"types":[]},{"text":"impl Clone for LitByte","synthetic":false,"types":[]},{"text":"impl Clone for LitChar","synthetic":false,"types":[]},{"text":"impl Clone for LitInt","synthetic":false,"types":[]},{"text":"impl Clone for LitFloat","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Cursor&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Punctuated&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T, P&gt; Clone for Pairs&lt;'a, T, P&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; Clone for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; Clone for Iter&lt;'a, T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T, P&gt; Clone for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Abi","synthetic":false,"types":[]},{"text":"impl Clone for AngleBracketedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Arm","synthetic":false,"types":[]},{"text":"impl Clone for AttrStyle","synthetic":false,"types":[]},{"text":"impl Clone for Attribute","synthetic":false,"types":[]},{"text":"impl Clone for BareFnArg","synthetic":false,"types":[]},{"text":"impl Clone for BinOp","synthetic":false,"types":[]},{"text":"impl Clone for Binding","synthetic":false,"types":[]},{"text":"impl Clone for Block","synthetic":false,"types":[]},{"text":"impl Clone for BoundLifetimes","synthetic":false,"types":[]},{"text":"impl Clone for ConstParam","synthetic":false,"types":[]},{"text":"impl Clone for Constraint","synthetic":false,"types":[]},{"text":"impl Clone for Data","synthetic":false,"types":[]},{"text":"impl Clone for DataEnum","synthetic":false,"types":[]},{"text":"impl Clone for DataStruct","synthetic":false,"types":[]},{"text":"impl Clone for DataUnion","synthetic":false,"types":[]},{"text":"impl Clone for DeriveInput","synthetic":false,"types":[]},{"text":"impl Clone for Expr","synthetic":false,"types":[]},{"text":"impl Clone for ExprArray","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssign","synthetic":false,"types":[]},{"text":"impl Clone for ExprAssignOp","synthetic":false,"types":[]},{"text":"impl Clone for ExprAsync","synthetic":false,"types":[]},{"text":"impl Clone for ExprAwait","synthetic":false,"types":[]},{"text":"impl Clone for ExprBinary","synthetic":false,"types":[]},{"text":"impl Clone for ExprBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprBox","synthetic":false,"types":[]},{"text":"impl Clone for ExprBreak","synthetic":false,"types":[]},{"text":"impl Clone for ExprCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprCast","synthetic":false,"types":[]},{"text":"impl Clone for ExprClosure","synthetic":false,"types":[]},{"text":"impl Clone for ExprContinue","synthetic":false,"types":[]},{"text":"impl Clone for ExprField","synthetic":false,"types":[]},{"text":"impl Clone for ExprForLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprGroup","synthetic":false,"types":[]},{"text":"impl Clone for ExprIf","synthetic":false,"types":[]},{"text":"impl Clone for ExprIndex","synthetic":false,"types":[]},{"text":"impl Clone for ExprLet","synthetic":false,"types":[]},{"text":"impl Clone for ExprLit","synthetic":false,"types":[]},{"text":"impl Clone for ExprLoop","synthetic":false,"types":[]},{"text":"impl Clone for ExprMacro","synthetic":false,"types":[]},{"text":"impl Clone for ExprMatch","synthetic":false,"types":[]},{"text":"impl Clone for ExprMethodCall","synthetic":false,"types":[]},{"text":"impl Clone for ExprParen","synthetic":false,"types":[]},{"text":"impl Clone for ExprPath","synthetic":false,"types":[]},{"text":"impl Clone for ExprRange","synthetic":false,"types":[]},{"text":"impl Clone for ExprReference","synthetic":false,"types":[]},{"text":"impl Clone for ExprRepeat","synthetic":false,"types":[]},{"text":"impl Clone for ExprReturn","synthetic":false,"types":[]},{"text":"impl Clone for ExprStruct","synthetic":false,"types":[]},{"text":"impl Clone for ExprTry","synthetic":false,"types":[]},{"text":"impl Clone for ExprTryBlock","synthetic":false,"types":[]},{"text":"impl Clone for ExprTuple","synthetic":false,"types":[]},{"text":"impl Clone for ExprType","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnary","synthetic":false,"types":[]},{"text":"impl Clone for ExprUnsafe","synthetic":false,"types":[]},{"text":"impl Clone for ExprWhile","synthetic":false,"types":[]},{"text":"impl Clone for ExprYield","synthetic":false,"types":[]},{"text":"impl Clone for Field","synthetic":false,"types":[]},{"text":"impl Clone for FieldPat","synthetic":false,"types":[]},{"text":"impl Clone for FieldValue","synthetic":false,"types":[]},{"text":"impl Clone for Fields","synthetic":false,"types":[]},{"text":"impl Clone for FieldsNamed","synthetic":false,"types":[]},{"text":"impl Clone for FieldsUnnamed","synthetic":false,"types":[]},{"text":"impl Clone for File","synthetic":false,"types":[]},{"text":"impl Clone for FnArg","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItem","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ForeignItemType","synthetic":false,"types":[]},{"text":"impl Clone for GenericArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericMethodArgument","synthetic":false,"types":[]},{"text":"impl Clone for GenericParam","synthetic":false,"types":[]},{"text":"impl Clone for Generics","synthetic":false,"types":[]},{"text":"impl Clone for ImplItem","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for ImplItemType","synthetic":false,"types":[]},{"text":"impl Clone for Index","synthetic":false,"types":[]},{"text":"impl Clone for Item","synthetic":false,"types":[]},{"text":"impl Clone for ItemConst","synthetic":false,"types":[]},{"text":"impl Clone for ItemEnum","synthetic":false,"types":[]},{"text":"impl Clone for ItemExternCrate","synthetic":false,"types":[]},{"text":"impl Clone for ItemFn","synthetic":false,"types":[]},{"text":"impl Clone for ItemForeignMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemImpl","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for ItemMacro2","synthetic":false,"types":[]},{"text":"impl Clone for ItemMod","synthetic":false,"types":[]},{"text":"impl Clone for ItemStatic","synthetic":false,"types":[]},{"text":"impl Clone for ItemStruct","synthetic":false,"types":[]},{"text":"impl Clone for ItemTrait","synthetic":false,"types":[]},{"text":"impl Clone for ItemTraitAlias","synthetic":false,"types":[]},{"text":"impl Clone for ItemType","synthetic":false,"types":[]},{"text":"impl Clone for ItemUnion","synthetic":false,"types":[]},{"text":"impl Clone for ItemUse","synthetic":false,"types":[]},{"text":"impl Clone for Label","synthetic":false,"types":[]},{"text":"impl Clone for LifetimeDef","synthetic":false,"types":[]},{"text":"impl Clone for Lit","synthetic":false,"types":[]},{"text":"impl Clone for LitBool","synthetic":false,"types":[]},{"text":"impl Clone for Local","synthetic":false,"types":[]},{"text":"impl Clone for Macro","synthetic":false,"types":[]},{"text":"impl Clone for MacroDelimiter","synthetic":false,"types":[]},{"text":"impl Clone for Member","synthetic":false,"types":[]},{"text":"impl Clone for Meta","synthetic":false,"types":[]},{"text":"impl Clone for MetaList","synthetic":false,"types":[]},{"text":"impl Clone for MetaNameValue","synthetic":false,"types":[]},{"text":"impl Clone for MethodTurbofish","synthetic":false,"types":[]},{"text":"impl Clone for NestedMeta","synthetic":false,"types":[]},{"text":"impl Clone for ParenthesizedGenericArguments","synthetic":false,"types":[]},{"text":"impl Clone for Pat","synthetic":false,"types":[]},{"text":"impl Clone for PatBox","synthetic":false,"types":[]},{"text":"impl Clone for PatIdent","synthetic":false,"types":[]},{"text":"impl Clone for PatLit","synthetic":false,"types":[]},{"text":"impl Clone for PatMacro","synthetic":false,"types":[]},{"text":"impl Clone for PatOr","synthetic":false,"types":[]},{"text":"impl Clone for PatPath","synthetic":false,"types":[]},{"text":"impl Clone for PatRange","synthetic":false,"types":[]},{"text":"impl Clone for PatReference","synthetic":false,"types":[]},{"text":"impl Clone for PatRest","synthetic":false,"types":[]},{"text":"impl Clone for PatSlice","synthetic":false,"types":[]},{"text":"impl Clone for PatStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatTuple","synthetic":false,"types":[]},{"text":"impl Clone for PatTupleStruct","synthetic":false,"types":[]},{"text":"impl Clone for PatType","synthetic":false,"types":[]},{"text":"impl Clone for PatWild","synthetic":false,"types":[]},{"text":"impl Clone for Path","synthetic":false,"types":[]},{"text":"impl Clone for PathArguments","synthetic":false,"types":[]},{"text":"impl Clone for PathSegment","synthetic":false,"types":[]},{"text":"impl Clone for PredicateEq","synthetic":false,"types":[]},{"text":"impl Clone for PredicateLifetime","synthetic":false,"types":[]},{"text":"impl Clone for PredicateType","synthetic":false,"types":[]},{"text":"impl Clone for QSelf","synthetic":false,"types":[]},{"text":"impl Clone for RangeLimits","synthetic":false,"types":[]},{"text":"impl Clone for Receiver","synthetic":false,"types":[]},{"text":"impl Clone for ReturnType","synthetic":false,"types":[]},{"text":"impl Clone for Signature","synthetic":false,"types":[]},{"text":"impl Clone for Stmt","synthetic":false,"types":[]},{"text":"impl Clone for TraitBound","synthetic":false,"types":[]},{"text":"impl Clone for TraitBoundModifier","synthetic":false,"types":[]},{"text":"impl Clone for TraitItem","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemConst","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMacro","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemMethod","synthetic":false,"types":[]},{"text":"impl Clone for TraitItemType","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for TypeArray","synthetic":false,"types":[]},{"text":"impl Clone for TypeBareFn","synthetic":false,"types":[]},{"text":"impl Clone for TypeGroup","synthetic":false,"types":[]},{"text":"impl Clone for TypeImplTrait","synthetic":false,"types":[]},{"text":"impl Clone for TypeInfer","synthetic":false,"types":[]},{"text":"impl Clone for TypeMacro","synthetic":false,"types":[]},{"text":"impl Clone for TypeNever","synthetic":false,"types":[]},{"text":"impl Clone for TypeParam","synthetic":false,"types":[]},{"text":"impl Clone for TypeParamBound","synthetic":false,"types":[]},{"text":"impl Clone for TypeParen","synthetic":false,"types":[]},{"text":"impl Clone for TypePath","synthetic":false,"types":[]},{"text":"impl Clone for TypePtr","synthetic":false,"types":[]},{"text":"impl Clone for TypeReference","synthetic":false,"types":[]},{"text":"impl Clone for TypeSlice","synthetic":false,"types":[]},{"text":"impl Clone for TypeTraitObject","synthetic":false,"types":[]},{"text":"impl Clone for TypeTuple","synthetic":false,"types":[]},{"text":"impl Clone for UnOp","synthetic":false,"types":[]},{"text":"impl Clone for UseGlob","synthetic":false,"types":[]},{"text":"impl Clone for UseGroup","synthetic":false,"types":[]},{"text":"impl Clone for UseName","synthetic":false,"types":[]},{"text":"impl Clone for UsePath","synthetic":false,"types":[]},{"text":"impl Clone for UseRename","synthetic":false,"types":[]},{"text":"impl Clone for UseTree","synthetic":false,"types":[]},{"text":"impl Clone for Variadic","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for VisCrate","synthetic":false,"types":[]},{"text":"impl Clone for VisPublic","synthetic":false,"types":[]},{"text":"impl Clone for VisRestricted","synthetic":false,"types":[]},{"text":"impl Clone for Visibility","synthetic":false,"types":[]},{"text":"impl Clone for WhereClause","synthetic":false,"types":[]},{"text":"impl Clone for WherePredicate","synthetic":false,"types":[]},{"text":"impl&lt;'c, 'a&gt; Clone for StepCursor&lt;'c, 'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]}];
implementors["teaclave_attestation"] = [{"text":"impl Clone for AttestationConfig","synthetic":false,"types":[]},{"text":"impl Clone for AttestationServiceConfig","synthetic":false,"types":[]},{"text":"impl Clone for AttestationReportVerifier","synthetic":false,"types":[]}];
implementors["teaclave_config"] = [{"text":"impl Clone for RuntimeConfig","synthetic":false,"types":[]}];
implementors["teaclave_crypto"] = [{"text":"impl Clone for AesGcm256Key","synthetic":false,"types":[]},{"text":"impl Clone for AesGcm128Key","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveFile128Key","synthetic":false,"types":[]}];
implementors["teaclave_proto"] = [{"text":"impl Clone for UserRegisterRequest","synthetic":false,"types":[]},{"text":"impl Clone for UserRegisterResponse","synthetic":false,"types":[]},{"text":"impl Clone for UserLoginRequest","synthetic":false,"types":[]},{"text":"impl Clone for UserLoginResponse","synthetic":false,"types":[]},{"text":"impl Clone for UserAuthenticateRequest","synthetic":false,"types":[]},{"text":"impl Clone for UserAuthenticateResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveAuthenticationApiRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveAuthenticationApiResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveAuthenticationInternalRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveAuthenticationInternalResponse","synthetic":false,"types":[]},{"text":"impl Clone for UserCredential","synthetic":false,"types":[]},{"text":"impl Clone for FileCryptoInfo","synthetic":false,"types":[]},{"text":"impl Clone for TaskOutputs","synthetic":false,"types":[]},{"text":"impl Clone for TaskFailure","synthetic":false,"types":[]},{"text":"impl Clone for TaskResult","synthetic":false,"types":[]},{"text":"impl Clone for Result","synthetic":false,"types":[]},{"text":"impl Clone for TaskStatus","synthetic":false,"types":[]},{"text":"impl Clone for GetRequest","synthetic":false,"types":[]},{"text":"impl Clone for GetResponse","synthetic":false,"types":[]},{"text":"impl Clone for PutRequest","synthetic":false,"types":[]},{"text":"impl Clone for PutResponse","synthetic":false,"types":[]},{"text":"impl Clone for DeleteRequest","synthetic":false,"types":[]},{"text":"impl Clone for DeleteResponse","synthetic":false,"types":[]},{"text":"impl Clone for EnqueueRequest","synthetic":false,"types":[]},{"text":"impl Clone for EnqueueResponse","synthetic":false,"types":[]},{"text":"impl Clone for DequeueRequest","synthetic":false,"types":[]},{"text":"impl Clone for DequeueResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveStorageRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveStorageResponse","synthetic":false,"types":[]},{"text":"impl Clone for RegisterInputFileRequest","synthetic":false,"types":[]},{"text":"impl Clone for RegisterInputFileResponse","synthetic":false,"types":[]},{"text":"impl Clone for UpdateInputFileRequest","synthetic":false,"types":[]},{"text":"impl Clone for UpdateInputFileResponse","synthetic":false,"types":[]},{"text":"impl Clone for RegisterOutputFileRequest","synthetic":false,"types":[]},{"text":"impl Clone for RegisterOutputFileResponse","synthetic":false,"types":[]},{"text":"impl Clone for UpdateOutputFileRequest","synthetic":false,"types":[]},{"text":"impl Clone for UpdateOutputFileResponse","synthetic":false,"types":[]},{"text":"impl Clone for RegisterFusionOutputRequest","synthetic":false,"types":[]},{"text":"impl Clone for RegisterFusionOutputResponse","synthetic":false,"types":[]},{"text":"impl Clone for RegisterInputFromOutputRequest","synthetic":false,"types":[]},{"text":"impl Clone for RegisterInputFromOutputResponse","synthetic":false,"types":[]},{"text":"impl Clone for GetOutputFileRequest","synthetic":false,"types":[]},{"text":"impl Clone for GetOutputFileResponse","synthetic":false,"types":[]},{"text":"impl Clone for GetInputFileRequest","synthetic":false,"types":[]},{"text":"impl Clone for GetInputFileResponse","synthetic":false,"types":[]},{"text":"impl Clone for FunctionInput","synthetic":false,"types":[]},{"text":"impl Clone for FunctionOutput","synthetic":false,"types":[]},{"text":"impl Clone for OwnerList","synthetic":false,"types":[]},{"text":"impl Clone for RegisterFunctionRequest","synthetic":false,"types":[]},{"text":"impl Clone for RegisterFunctionResponse","synthetic":false,"types":[]},{"text":"impl Clone for GetFunctionRequest","synthetic":false,"types":[]},{"text":"impl Clone for GetFunctionResponse","synthetic":false,"types":[]},{"text":"impl Clone for DataMap","synthetic":false,"types":[]},{"text":"impl Clone for CreateTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for CreateTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for GetTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for GetTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for AssignDataRequest","synthetic":false,"types":[]},{"text":"impl Clone for AssignDataResponse","synthetic":false,"types":[]},{"text":"impl Clone for ApproveTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for ApproveTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for InvokeTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for InvokeTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveFrontendRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveFrontendResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveManagementRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveManagementResponse","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeDataRequest","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeDataResponse","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeFunctionRequest","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeFunctionResponse","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeStagedTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for AuthorizeStagedTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveAccessControlRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveAccessControlResponse","synthetic":false,"types":[]},{"text":"impl Clone for SubscribeRequest","synthetic":false,"types":[]},{"text":"impl Clone for SubscribeResponse","synthetic":false,"types":[]},{"text":"impl Clone for PullTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for PullTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for UpdateTaskStatusRequest","synthetic":false,"types":[]},{"text":"impl Clone for UpdateTaskStatusResponse","synthetic":false,"types":[]},{"text":"impl Clone for UpdateTaskResultRequest","synthetic":false,"types":[]},{"text":"impl Clone for UpdateTaskResultResponse","synthetic":false,"types":[]},{"text":"impl Clone for PublishTaskRequest","synthetic":false,"types":[]},{"text":"impl Clone for PublishTaskResponse","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveSchedulerRequest","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveSchedulerResponse","synthetic":false,"types":[]}];
implementors["teaclave_rpc"] = [{"text":"impl Clone for SgxTrustedTlsServerConfig","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Request&lt;T&gt;","synthetic":false,"types":[]}];
implementors["teaclave_types"] = [{"text":"impl Clone for EnclaveMeasurement","synthetic":false,"types":[]},{"text":"impl Clone for EnclaveAttr","synthetic":false,"types":[]},{"text":"impl Clone for FileAuthTag","synthetic":false,"types":[]},{"text":"impl Clone for FileCrypto","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveInputFile","synthetic":false,"types":[]},{"text":"impl Clone for TeaclaveOutputFile","synthetic":false,"types":[]},{"text":"impl Clone for HandleFileInfo","synthetic":false,"types":[]},{"text":"impl Clone for StagedFileInfo","synthetic":false,"types":[]},{"text":"impl Clone for StagedFiles","synthetic":false,"types":[]},{"text":"impl Clone for FunctionArguments","synthetic":false,"types":[]},{"text":"impl Clone for FunctionInputFiles","synthetic":false,"types":[]},{"text":"impl Clone for FunctionOutputFiles","synthetic":false,"types":[]},{"text":"impl Clone for FunctionInputFile","synthetic":false,"types":[]},{"text":"impl Clone for FunctionOutputFile","synthetic":false,"types":[]},{"text":"impl Clone for UserID","synthetic":false,"types":[]},{"text":"impl Clone for OwnerList","synthetic":false,"types":[]},{"text":"impl Clone for TaskStatus","synthetic":false,"types":[]},{"text":"impl Clone for OutputsTags","synthetic":false,"types":[]},{"text":"impl Clone for TaskOutputs","synthetic":false,"types":[]},{"text":"impl Clone for TaskFailure","synthetic":false,"types":[]},{"text":"impl Clone for ExternalID","synthetic":false,"types":[]},{"text":"impl Clone for TaskResult","synthetic":false,"types":[]},{"text":"impl Clone for TaskFileOwners","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for TaskFiles&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl Clone for TaskState","synthetic":false,"types":[]},{"text":"impl&lt;S:&nbsp;Clone + StateTag&gt; Clone for Task&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Create","synthetic":false,"types":[]},{"text":"impl Clone for Assign","synthetic":false,"types":[]},{"text":"impl Clone for Approve","synthetic":false,"types":[]},{"text":"impl Clone for Stage","synthetic":false,"types":[]},{"text":"impl Clone for Run","synthetic":false,"types":[]},{"text":"impl Clone for Finish","synthetic":false,"types":[]},{"text":"impl Clone for Done","synthetic":false,"types":[]},{"text":"impl Clone for ExecutorType","synthetic":false,"types":[]},{"text":"impl Clone for Executor","synthetic":false,"types":[]}];
implementors["termcolor"] = [{"text":"impl Clone for ColorChoice","synthetic":false,"types":[]},{"text":"impl Clone for ColorSpec","synthetic":false,"types":[]},{"text":"impl Clone for Color","synthetic":false,"types":[]},{"text":"impl Clone for ParseColorError","synthetic":false,"types":[]},{"text":"impl Clone for ParseColorErrorKind","synthetic":false,"types":[]}];
implementors["threadpool"] = [{"text":"impl Clone for Builder","synthetic":false,"types":[]},{"text":"impl Clone for ThreadPool","synthetic":false,"types":[]}];
implementors["tiff"] = [{"text":"impl Clone for Tag","synthetic":false,"types":[]},{"text":"impl Clone for Type","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Entry","synthetic":false,"types":[]},{"text":"impl Clone for PhotometricInterpretation","synthetic":false,"types":[]},{"text":"impl Clone for CompressionMethod","synthetic":false,"types":[]},{"text":"impl Clone for PlanarConfiguration","synthetic":false,"types":[]},{"text":"impl Clone for Predictor","synthetic":false,"types":[]},{"text":"impl Clone for Limits","synthetic":false,"types":[]},{"text":"impl Clone for Rational","synthetic":false,"types":[]},{"text":"impl Clone for TiffFormatError","synthetic":false,"types":[]},{"text":"impl Clone for InflateError","synthetic":false,"types":[]},{"text":"impl Clone for TiffUnsupportedError","synthetic":false,"types":[]},{"text":"impl Clone for ColorType","synthetic":false,"types":[]}];
implementors["toml"] = [{"text":"impl Clone for Map&lt;String, Value&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Value","synthetic":false,"types":[]},{"text":"impl Clone for Datetime","synthetic":false,"types":[]},{"text":"impl Clone for DatetimeParseError","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for Spanned&lt;T&gt;","synthetic":false,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Clone for Level","synthetic":false,"types":[]},{"text":"impl Clone for BidiClass","synthetic":false,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Decompositions&lt;I&gt;","synthetic":false,"types":[]},{"text":"impl&lt;I:&nbsp;Clone&gt; Clone for Recompositions&lt;I&gt;","synthetic":false,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Clone for Input&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for EndOfInput","synthetic":false,"types":[]}];
implementors["url"] = [{"text":"impl&lt;S:&nbsp;Clone&gt; Clone for Host&lt;S&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Origin","synthetic":false,"types":[]},{"text":"impl Clone for OpaqueOrigin","synthetic":false,"types":[]},{"text":"impl Clone for ParseError","synthetic":false,"types":[]},{"text":"impl Clone for SyntaxViolation","synthetic":false,"types":[]},{"text":"impl Clone for Position","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for Parse&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Url","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for ParseOptions&lt;'a&gt;","synthetic":false,"types":[]}];
implementors["uuid"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for Hyphenated","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for HyphenatedRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Simple","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for SimpleRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Urn","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for UrnRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for Version","synthetic":false,"types":[]},{"text":"impl Clone for Variant","synthetic":false,"types":[]},{"text":"impl Clone for Uuid","synthetic":false,"types":[]}];
implementors["webpki"] = [{"text":"impl Clone for Error","synthetic":false,"types":[]},{"text":"impl Clone for DNSName","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; Clone for DNSNameRef&lt;'a&gt;","synthetic":false,"types":[]},{"text":"impl Clone for InvalidDNSNameError","synthetic":false,"types":[]},{"text":"impl Clone for Time","synthetic":false,"types":[]}];
implementors["yasna"] = [{"text":"impl Clone for ObjectIdentifier","synthetic":false,"types":[]},{"text":"impl Clone for ParseOidError","synthetic":false,"types":[]},{"text":"impl Clone for UTCTime","synthetic":false,"types":[]},{"text":"impl Clone for GeneralizedTime","synthetic":false,"types":[]},{"text":"impl Clone for TaggedDerValue","synthetic":false,"types":[]},{"text":"impl Clone for ASN1Error","synthetic":false,"types":[]},{"text":"impl Clone for ASN1ErrorKind","synthetic":false,"types":[]},{"text":"impl Clone for BERMode","synthetic":false,"types":[]},{"text":"impl Clone for PCBit","synthetic":false,"types":[]},{"text":"impl Clone for TagClass","synthetic":false,"types":[]},{"text":"impl Clone for Tag","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()