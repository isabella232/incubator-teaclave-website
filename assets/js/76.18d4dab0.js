(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{552:function(e,t,r){"use strict";r.r(t);var o=r(29),i=Object(o.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"rust-sgx-remote-attestation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rust-sgx-remote-attestation"}},[e._v("#")]),e._v(" Rust SGX remote attestation")]),e._v(" "),r("p",[e._v("This example is derived from "),r("a",{attrs:{href:"https://github.com/svartkanin/linux-sgx-remoteattestation",target:"_blank",rel:"noopener noreferrer"}},[e._v("linux-sgx-remoteattestation")]),e._v(". Only the enclave is rewrote into Rust.\nPlease refer to the following Readme for further detail.")]),e._v(" "),r("p",[e._v("For users' convenience, we simply add "),r("code",[e._v("SGX_MODE=HW SGX_PRERELEASE=1")]),e._v(" into Makefile and just run "),r("code",[e._v("make")]),e._v(" in both "),r("code",[e._v("ServiceProvider")]),e._v(" and "),r("code",[e._v("Application")]),e._v(".")]),e._v(" "),r("p",[e._v("btw. Dependencies include "),r("code",[e._v("libjsoncpp-dev")]),e._v(" which is missing from below.")]),e._v(" "),r("h1",{attrs:{id:"certificate-configuration-in-generalsettings-h"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#certificate-configuration-in-generalsettings-h"}},[e._v("#")]),e._v(" Certificate configuration in GeneralSettings.h")]),e._v(" "),r("p",[e._v("There are "),r("strong",[e._v("two")]),e._v(" set of crt/keys in GeneralSettings.h.")]),e._v(" "),r("ul",[r("li",[r("p",[r("code",[e._v("server_crt")]),e._v(" and "),r("code",[e._v("server_key")]),e._v(" is for the connection between Service Provider and Application. This is "),r("strong",[e._v("not")]),e._v(" used in IAS connection.")])]),e._v(" "),r("li",[r("p",[r("code",[e._v('static const char *ias_crt = "";')]),e._v(" This is the path of the client cert generated for IAS registration. During the IAS registration, one always generates two files: "),r("code",[e._v("client.crt")]),e._v(" and "),r("code",[e._v("client.key")]),e._v(". Use the following commands to combine them into one PEM file and place it here:")])])]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ openssl pkcs12 -export -in ./client.crt -inkey client.key > client.p12\nEnter Export Password:\nVerifying - Enter Export Password:\n\n$ openssl pkcs12 -in client.p12 -out client.pem -clcerts\nEnter Import Password:\nMAC verified OK\nEnter PEM pass phrase:\nVerifying - Enter PEM pass phrase:\n")])])]),r("p",[e._v("Then the settings should be:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('static const char *ias_crt = "client.pem"\n')])])]),r("p",[e._v("During Remote attestation, the PEM pass phrase would be required.")]),e._v(" "),r("p",[e._v("As the most simple setup, one can just use IAS client crt/key for "),r("code",[e._v("server_crt")]),e._v(" and "),r("code",[e._v("server_key")]),e._v(". It works.")]),e._v(" "),r("h1",{attrs:{id:"signature-policy-definition-in-serviceprovider-cpp"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#signature-policy-definition-in-serviceprovider-cpp"}},[e._v("#")]),e._v(" Signature policy definition in ServiceProvider.cpp")]),e._v(" "),r("p",[e._v("Please check your "),r("a",{attrs:{href:"https://software.intel.com/en-us/articles/signature-policy",target:"_blank",rel:"noopener noreferrer"}},[e._v("signature policy")]),e._v(" and set it up "),r("a",{attrs:{href:"https://github.com/apache/teaclave-sgx-sdk/blob/3ac5a21c3720bd819c938d28df11cbae499f3bc5/samplecode/remoteattestation/ServiceProvider/service_provider/ServiceProvider.cpp#L222",target:"_blank",rel:"noopener noreferrer"}},[e._v("here")]),e._v(" and "),r("a",{attrs:{href:"https://github.com/apache/teaclave-sgx-sdk/blob/c1bf3775e4abbd79a26450f91655d3f67f9e0083/samplecode/remoteattestation/ServiceProvider/service_provider/ServiceProvider.cpp#L291",target:"_blank",rel:"noopener noreferrer"}},[e._v("here")]),e._v(". Wrong signature policy would trigger IAS HTTP error code 400 in MSG3.")]),e._v(" "),r("h1",{attrs:{id:"linux-sgx-remote-attestation-original-readme-below"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#linux-sgx-remote-attestation-original-readme-below"}},[e._v("#")]),e._v(" Linux SGX remote attestation (Original Readme below)")]),e._v(" "),r("p",[e._v("Example of a remote attestation with Intel's SGX including the communication with IAS.")]),e._v(" "),r("p",[e._v("The code requires the installation of Intel SGX "),r("a",{attrs:{href:"https://github.com/01org/linux-sgx",target:"_blank",rel:"noopener noreferrer"}},[e._v("here")]),e._v(" and\nthe SGX driver "),r("a",{attrs:{href:"https://github.com/01org/linux-sgx-driver",target:"_blank",rel:"noopener noreferrer"}},[e._v("here")]),e._v(". Furthermore, also a developer account\nfor the usage of IAS has be registered "),r("a",{attrs:{href:"https://software.intel.com/en-us/sgx",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deverloper account")]),e._v(".\nAfter the registration with a certificate (can be self-signed for development purposes), Intel will\nrespond with a SPID which is needed to communicate with IAS.")]),e._v(" "),r("p",[e._v("The code consists of two separate programs, the ServiceProvider and the Application.\nThe message exchange over the network is performed using Google Protocol Buffers.")]),e._v(" "),r("h2",{attrs:{id:"installation"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#installation"}},[e._v("#")]),e._v(" Installation")]),e._v(" "),r("p",[e._v("Before running the code, some settings have to be set in the "),r("code",[e._v("GeneralSettings.h")]),e._v(" file:")]),e._v(" "),r("ul",[r("li",[e._v("The application port and IP")]),e._v(" "),r("li",[e._v("A server certificate and private key are required for the SSL communication between the SP and the Application (which can be self-signed)"),r("br"),e._v("\ne.g. "),r("code",[e._v("openssl req -x509 -nodes -newkey rsa:4096 -keyout server.key -out sever.crt -days 365")])]),e._v(" "),r("li",[e._v("The SPID provided by Intel when registering for the developer account")]),e._v(" "),r("li",[e._v("The certificate sent to Intel when registering for the developer account")]),e._v(" "),r("li",[e._v("IAS Rest API url (should stay the same)")])]),e._v(" "),r("p",[e._v("To be able to run the above code some external libraries are needed:")]),e._v(" "),r("ul",[r("li",[e._v("Google Protocol Buffers (should already be installed with the SGX SDK package) otherwise install "),r("code",[e._v("libprotobuf-dev")]),e._v(", "),r("code",[e._v("libprotobuf-c0-dev")]),e._v(" and "),r("code",[e._v("protobuf-compiler")])]),e._v(" "),r("li",[r("code",[e._v("libboost-thread-dev")]),e._v(", "),r("code",[e._v("libboost-system-dev")])]),e._v(" "),r("li",[r("code",[e._v("curl")]),e._v(", "),r("code",[e._v("libcurl4-openssl-dev")])]),e._v(" "),r("li",[r("code",[e._v("libssl")])]),e._v(" "),r("li",[r("code",[e._v("liblog4cpp5-dev")])])]),e._v(" "),r("p",[e._v("After the installation of those dependencies, the code can be compiled with the following commands:"),r("br"),e._v(" "),r("code",[e._v("cd ServiceProvider")]),r("br"),e._v(" "),r("code",[e._v("make")]),r("br"),e._v(" "),r("code",[e._v("cd ../Application")]),r("br"),e._v(" "),r("code",[e._v("make SGX_MODE=HW SGX_PRERELEASE=1")])])])}),[],!1,null,null,null);t.default=i.exports}}]);