(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{560:function(e,t,a){"use strict";a.r(t);var o=a(29),l=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"rust-sgx-template-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rust-sgx-template-project"}},[e._v("#")]),e._v(" Rust SGX - Template project")]),e._v(" "),a("p",[e._v("==================================")]),e._v(" "),a("h3",{attrs:{id:"this-is-a-template-project-to-start-developing-with-the-rust-sgx-sdk-https-github-com-apache-incubator-teaclave-sgx-sdk-easily"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-is-a-template-project-to-start-developing-with-the-rust-sgx-sdk-https-github-com-apache-incubator-teaclave-sgx-sdk-easily"}},[e._v("#")]),e._v(" This is a template project to start developing with the Rust SGX SDK (https://github.com/apache/incubator-teaclave-sgx-sdk/) easily.")]),e._v(" "),a("p",[e._v("You will find in its template:")]),e._v(" "),a("ul",[a("li",[e._v("Makefiles to build your project easily, and link the "),a("code",[e._v("SGX EDL C")]),e._v(" generated files to your Rust SGX projects")]),e._v(" "),a("li",[e._v("The file "),a("code",[e._v("buildenv.mk")]),e._v(" that contains compilation rules when building enclave. No need to specify anymore where this file is located.")]),e._v(" "),a("li",[e._v("The file "),a("code",[e._v("build.rs")]),e._v(" already configured to build the app/host part properly.")]),e._v(" "),a("li",[e._v("The file rust-toolchain, so we can force the use of one specific toolchain ("),a("code",[e._v("nightly-2020-10-25")]),e._v(" in this case)")]),e._v(" "),a("li",[a("code",[e._v("Cargo/Xargo.toml")]),e._v(" files to set up your project easily. All the dependencies you might need has been added.")])]),e._v(" "),a("p",[e._v("You can find those files in this template:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("|-- app/\n|   |-- src/\n|       |-- main.rs\n|   |-- Cargo.toml\n|   |-- Makefile\n|   |-- build.rs\n|   +-- rust-toolchain\n|-- enclave/\n|   |-- src/\n|       |-- lib.rs\n|   |-- Cargo.toml\n|   |-- Enclave.config.xml\n|   |-- Enclave.edl\n|   |-- Enclave.lds\n|   |-- Makefile\n|   |-- Xargo.toml\n|   +-- rust-toolchain\n|-- Makefile\n+-- buildenv.mk\n")])])]),a("h2",{attrs:{id:"setting-up-your-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setting-up-your-project"}},[e._v("#")]),e._v(" Setting up your project")]),e._v(" "),a("p",[e._v("You need to follow a few steps to use this template properly:")]),e._v(" "),a("ul",[a("li",[e._v("Add your "),a("code",[e._v(".rs")]),e._v(" files to the "),a("code",[e._v("src/")]),e._v(" folders ("),a("code",[e._v("lib.rs")]),e._v(" / your enclave source code goes in "),a("code",[e._v("enclave/src")]),e._v(", your host/app source code goes in "),a("code",[e._v("app/src")]),e._v("), or modify the "),a("code",[e._v(".rs")]),e._v(" files already included with the project")]),e._v(" "),a("li",[e._v("Add your own "),a("code",[e._v("Enclave.edl")]),e._v(" file, or modify the one joined in the project.")]),e._v(" "),a("li",[e._v("Change the "),a("code",[e._v("Cargo.toml (or/and Xargo.toml if you want to use Xargo)")]),e._v(" files depending on of your needs (adding/removing dependencies).\n"),a("ul",[a("li",[e._v("Be careful if you want to change the library name on the "),a("code",[e._v("Cargo.toml")]),e._v(" file (enclave part), you will need to reflect this change on the enclave "),a("code",[e._v("Makefile")]),e._v(", more specifically on the "),a("code",[e._v("ENCLAVE_CARGO_LIB")]),e._v(" variable, and on the "),a("code",[e._v("lib.rs")]),e._v(" file.")]),e._v(" "),a("li",[e._v("If you need to change the app/host name, please make sure to edit the host "),a("code",[e._v("Makefile")]),e._v(", and change the variable "),a("code",[e._v("APP_U")]),e._v(".")])])])]),e._v(" "),a("h2",{attrs:{id:"build-your-project"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-your-project"}},[e._v("#")]),e._v(" Build your project")]),e._v(" "),a("h3",{attrs:{id:"before-starting-the-building-process-please-make-sure-you-downloaded-the-rust-sgx-sdk-repository-we-re-going-to-need-the-edl-and-headers-files-joined-in-the-sdk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before-starting-the-building-process-please-make-sure-you-downloaded-the-rust-sgx-sdk-repository-we-re-going-to-need-the-edl-and-headers-files-joined-in-the-sdk"}},[e._v("#")]),e._v(" Before starting the building process, please make sure you downloaded the Rust SGX SDK repository, we're going to need the EDL and headers files joined in the SDK.")]),e._v(" "),a("p",[e._v("Once you downloaded the Rust SGX SDK, you have multiple ways to start the building process:")]),e._v(" "),a("ul",[a("li",[e._v("Run this command: "),a("code",[e._v("CUSTOM_EDL_PATH=~/teaenclave/edl CUSTOM_COMMON_PATH=~/teaenclave/common make")]),e._v(" (replace "),a("code",[e._v("~/teaenclave")]),e._v(" by the actual SDK location)")]),e._v(" "),a("li",[e._v("You can also run the command export ("),a("code",[e._v("export CUSTOM_EDL_PATH=~/teaenclave/edl")]),e._v("), and specify the variables before calling make. It is advised to add this command on your "),a("code",[e._v(".bashrc")]),e._v(" file (if you use bash), or your favorite shell configuration file.")])]),e._v(" "),a("h3",{attrs:{id:"by-default-your-project-will-be-compiled-in-hardware-mode-if-you-wish-to-compile-your-project-in-software-simulation-mode-you-will-need-to-specify-it-either-by-adding-sgx-mode-sw-before-make-or-by-setting-the-sgx-mode-variable-environment-to-sw"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#by-default-your-project-will-be-compiled-in-hardware-mode-if-you-wish-to-compile-your-project-in-software-simulation-mode-you-will-need-to-specify-it-either-by-adding-sgx-mode-sw-before-make-or-by-setting-the-sgx-mode-variable-environment-to-sw"}},[e._v("#")]),e._v(" By default, your project will be compiled in hardware mode. If you wish to compile your project in software/simulation mode, you will need to specify it, either by adding "),a("code",[e._v("SGX_MODE=SW")]),e._v(" before make, or by setting the SGX_MODE variable environment to SW.")]),e._v(" "),a("h3",{attrs:{id:"cargo-is-used-by-default-when-compiling-but-you-can-also-use-xargo-either-by-adding-xargo-sgx-1-before-make-or-by-setting-the-xargo-sgx-variable-environment-to-1-you-will-also-need-to-specify-xargo-library-path-with-xargo-path"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cargo-is-used-by-default-when-compiling-but-you-can-also-use-xargo-either-by-adding-xargo-sgx-1-before-make-or-by-setting-the-xargo-sgx-variable-environment-to-1-you-will-also-need-to-specify-xargo-library-path-with-xargo-path"}},[e._v("#")]),e._v(" Cargo is used by default when compiling, but you can also use Xargo either by adding "),a("code",[e._v("XARGO_SGX=1")]),e._v(" before make, or by setting the XARGO_SGX variable environment to 1. You will also need to specify Xargo library path with XARGO_PATH.")]),e._v(" "),a("h3",{attrs:{id:"the-makefile-has-those-commands-available"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-makefile-has-those-commands-available"}},[e._v("#")]),e._v(" The makefile has those commands available:")]),e._v(" "),a("ul",[a("li",[e._v("make (will compile everything)")]),e._v(" "),a("li",[e._v("make host (will only compile the host part)")]),e._v(" "),a("li",[e._v("make enclave (will only compile the enclave part)")]),e._v(" "),a("li",[e._v("make clean (will clean the objects/C edl files generated)")]),e._v(" "),a("li",[e._v("make clean_host (will clean the objects/C edl files generated for the host only)")]),e._v(" "),a("li",[e._v("make clean_enclave (will clean the objects/C edl files generated for the enclave only)")]),e._v(" "),a("li",[e._v("make fclean (will clean objects/C edl files and the binaries, plus calling cargo clean for everything)")]),e._v(" "),a("li",[e._v("make fclean_host (will clean objects/C edl files and the binaries, plus calling cargo clean for the host only)")]),e._v(" "),a("li",[e._v("make fclean_enclave (will clean objects/C edl files and the binaries, plus calling cargo clean for the enclave only)")]),e._v(" "),a("li",[e._v("make re (re as relink, will clean everything then compile everything again)")]),e._v(" "),a("li",[e._v("make re_host (re as relink, will clean the host part then compile it again)")]),e._v(" "),a("li",[e._v("make re_enclave (re as relink, will clean the enclave part then compile it again)")])])])}),[],!1,null,null,null);t.default=l.exports}}]);