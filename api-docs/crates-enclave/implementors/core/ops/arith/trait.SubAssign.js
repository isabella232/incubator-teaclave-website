(function() {var implementors = {};
implementors["chrono"] = [{"text":"impl SubAssign&lt;Duration&gt; for NaiveDate","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Duration&gt; for NaiveTime","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;Duration&gt; for NaiveDateTime","synthetic":false,"types":[]}];
implementors["num_bigint"] = [{"text":"impl&lt;'a&gt; SubAssign&lt;&amp;'a BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;BigInt&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;usize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i8&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i16&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;isize&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i32&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i64&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;i128&gt; for BigInt","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl&lt;'a&gt; SubAssign&lt;&amp;'a BigUint&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u8&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u16&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;usize&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u32&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u64&gt; for BigUint","synthetic":false,"types":[]},{"text":"impl SubAssign&lt;u128&gt; for BigUint","synthetic":false,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;&amp;'a Complex&lt;T&gt;&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + NumAssign&gt; SubAssign&lt;&amp;'a T&gt; for Complex&lt;T&gt;","synthetic":false,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;&amp;'a Ratio&lt;T&gt;&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Clone + Integer + NumAssign&gt; SubAssign&lt;&amp;'a T&gt; for Ratio&lt;T&gt;","synthetic":false,"types":[]}];
implementors["png"] = [{"text":"impl SubAssign&lt;Transformations&gt; for Transformations","synthetic":false,"types":[]}];
implementors["rulinalg"] = [{"text":"impl&lt;T&gt; SubAssign&lt;T&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; SubAssign&lt;&amp;'a T&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; SubAssign&lt;T&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; SubAssign&lt;&amp;'b T&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T&gt; SubAssign&lt;Matrix&lt;T&gt;&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; SubAssign&lt;&amp;'a Matrix&lt;T&gt;&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; SubAssign&lt;Matrix&lt;T&gt;&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; SubAssign&lt;&amp;'b Matrix&lt;T&gt;&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; SubAssign&lt;MatrixSlice&lt;'b, T&gt;&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, 'c, T&gt; SubAssign&lt;&amp;'c MatrixSlice&lt;'b, T&gt;&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; SubAssign&lt;MatrixSliceMut&lt;'b, T&gt;&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, 'c, T&gt; SubAssign&lt;&amp;'c MatrixSliceMut&lt;'b, T&gt;&gt; for MatrixSliceMut&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; SubAssign&lt;MatrixSlice&lt;'a, T&gt;&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; SubAssign&lt;&amp;'b MatrixSlice&lt;'a, T&gt;&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, T&gt; SubAssign&lt;MatrixSliceMut&lt;'a, T&gt;&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;'a, 'b, T&gt; SubAssign&lt;&amp;'b MatrixSliceMut&lt;'a, T&gt;&gt; for Matrix&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Sub&lt;T, Output = T&gt;,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Sub&lt;T, Output = T&gt;&gt; SubAssign&lt;T&gt; for Vector&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + Sub&lt;T, Output = T&gt;&gt; SubAssign&lt;&amp;'a T&gt; for Vector&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Copy + Sub&lt;T, Output = T&gt;&gt; SubAssign&lt;Vector&lt;T&gt;&gt; for Vector&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;'a, T:&nbsp;Copy + Sub&lt;T, Output = T&gt;&gt; SubAssign&lt;&amp;'a Vector&lt;T&gt;&gt; for Vector&lt;T&gt;","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()