(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{473:function(e,t,a){"use strict";a.r(t);var s=a(29),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"before-start"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#before-start"}},[e._v("#")]),e._v(" Before start")]),e._v(" "),a("p",[e._v("As of today (03/19/2019), "),a("code",[e._v("sgx-gdb")]),e._v(" cannot work well with gdb > 7.12. In this wiki page, I'm using the gdb 7.11.1. Please check if you have the correct version of gdb.")]),e._v(" "),a("h1",{attrs:{id:"requirement"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requirement"}},[e._v("#")]),e._v(" Requirement")]),e._v(" "),a("ul",[a("li",[e._v("Linux")]),e._v(" "),a("li",[e._v("docker installed")]),e._v(" "),a("li",[e._v("Intel SGX driver installed and "),a("code",[e._v("/dev/isgx")]),e._v(" works.")]),e._v(" "),a("li",[e._v("docker image baiduxlab/sgx-rust:1604")])]),e._v(" "),a("h1",{attrs:{id:"prepare-the-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prepare-the-code"}},[e._v("#")]),e._v(" Prepare the code")]),e._v(" "),a("p",[e._v("Let's use "),a("a",{attrs:{href:"https://github.com/apache/incubator-teaclave-sgx-sdk/tree/master/samplecode/hello-rust",target:"_blank",rel:"noopener noreferrer"}},[e._v("hello-rust")]),e._v(" as debuggee. We need to add debug info for all of the Rust/C codes.")]),e._v(" "),a("p",[e._v("First, switch to debug build for the Rust codes. In the root Makefile of hello-rust, remove the "),a("code",[e._v("--release")]),e._v(" Rust flag and fix the path:")]),e._v(" "),a("div",{staticClass:"language-diff extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-App_Rust_Flags := --release\n+App_Rust_Flags :=\n App_SRC_Files := $(shell find app/ -type f -name '*.rs') $(shell find app/ -type f -name 'Cargo.toml')\n App_Include_Paths := -I ./app -I./include -I$(SGX_SDK)/include -I$(CUSTOM_EDL_PATH)\n App_C_Flags := $(SGX_COMMON_CFLAGS) -fPIC -Wno-attributes $(App_Include_Paths)\n\n-App_Rust_Path := ./app/target/release\n+App_Rust_Path := ./app/target/debug\n App_Enclave_u_Object :=app/libEnclave_u.a\n App_Name := bin/app\n")])])]),a("p",[e._v("And do the same thing in enclave/Makefile:")]),e._v(" "),a("div",{staticClass:"language-diff extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("-       RUSTC_BOOTSTRAP=1 cargo build --release\n-       cp ./target/release/libhelloworldsampleenclave.a ../lib/libenclave.a\n-endif\n+       RUSTC_BOOTSTRAP=1 cargo build\n+       cp ./target/debug/libhelloworldsampleenclave.a ../lib/libenclave.a\n+endif\n")])])]),a("p",[e._v("And we also need to add debug symbol to for Enclave_t.c and Enclave_u.c. In the root Makefile:")]),e._v(" "),a("div",{staticClass:"language-diff extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("        SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x86/sgx_sign\n        SGX_EDGER8R := $(SGX_SDK)/bin/x86/sgx_edger8r\n else\n-       SGX_COMMON_CFLAGS := -m64\n+       SGX_COMMON_CFLAGS := -m64 -ggdb\n        SGX_LIBRARY_PATH := $(SGX_SDK)/lib64\n        SGX_ENCLAVE_SIGNER := $(SGX_SDK)/bin/x64/sgx_sign\n        SGX_EDGER8R := $(SGX_SDK)/bin/x64/sgx_edger8r\n")])])]),a("h1",{attrs:{id:"start-the-docker-container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#start-the-docker-container"}},[e._v("#")]),e._v(" Start the docker container")]),e._v(" "),a("p",[e._v("Next, use the following command to start a docker container. Please "),a("strong",[e._v("fix the path")]),e._v(" before running it.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ docker run -ti \\\n             --rm \\\n             --privileged \\\n             -v /home/ding/rust-sgx-sdk:/root/rust-sgx-sdk \\\n             --device /dev/isgx \\\n             baiduxlab/sgx-rust:1604 bash\nroot@ef40bc98b273:~#\n")])])]),a("p",[e._v("Then, set up gdb using "),a("code",[e._v("apt-get")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@ef40bc98b273:~# apt-get update && apt-get install -y gdb\n")])])]),a("p",[e._v("Then check if the version is correct:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('root@ef40bc98b273:~# gdb --version\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type "show copying"\nand "show warranty" for details.\nThis GDB was configured as "x86_64-linux-gnu".\nType "show configuration" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type "help".\nType "apropos word" to search for commands related to "word".\n')])])]),a("p",[e._v("As of today (03-19-2019), the installed version is 7.11.1 and it's ok.")]),e._v(" "),a("p",[e._v("Then we need to start the aesm service daemon:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@ef40bc98b273:~# /opt/intel/libsgx-enclave-common/aesm/aesm_service\naesm_service[878]: The server sock is 0x55ed65a9a560\naesm_service[878]: [ADMIN]White List update requested\naesm_service[878]: [ADMIN]Platform Services initializing\naesm_service[878]: [ADMIN]Platform Services initialization failed due to DAL error\naesm_service[878]: [ADMIN]White list update request successful for Version: 49\n")])])]),a("p",[e._v("Just ignore the "),a("code",[e._v("DAL error")]),e._v(".")]),e._v(" "),a("h1",{attrs:{id:"debug-the-enclave"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debug-the-enclave"}},[e._v("#")]),e._v(" Debug the enclave")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("root@ef40bc98b273:~# cd rust-sgx-sdk/samplecode/hello-rust/\nroot@ef40bc98b273:~/rust-sgx-sdk/samplecode/hello-rust# make\ninfo: syncing channel updates for 'stable-2019-01-17-x86_64-unknown-linux-gnu'\ninfo: latest update on 2019-01-17, rust version 1.32.0 (9fda7c223 2019-01-16)\ninfo: downloading component 'rustc'\n..........(suppressed output)..........\nLINK =>  enclave/enclave.so\n\x3c!-- Please refer to User's Guide for the explanation of each field --\x3e\n<EnclaveConfiguration>\n    <ProdID>0</ProdID>\n    <ISVSVN>0</ISVSVN>\n    <StackMaxSize>0x40000</StackMaxSize>\n    <HeapMaxSize>0x100000</HeapMaxSize>\n    <TCSNum>1</TCSNum>\n    <TCSPolicy>1</TCSPolicy>\n    <DisableDebug>0</DisableDebug>\n    <MiscSelect>0</MiscSelect>\n    <MiscMask>0xFFFFFFFF</MiscMask>\n</EnclaveConfiguration>\ntcs_num 1, tcs_max_num 1, tcs_min_pool 1\nThe required memory is 1798144B.\nSucceed.\nSIGN =>  bin/enclave.signed.so\n")])])]),a("p",[e._v("Let's debug it!")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('root@ef40bc98b273:~/rust-sgx-sdk/samplecode/hello-rust# cd bin/\nroot@ef40bc98b273:~/rust-sgx-sdk/samplecode/hello-rust/bin# sgx-gdb ./app\nGNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1\nCopyright (C) 2016 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.  Type "show copying"\nand "show warranty" for details.\nThis GDB was configured as "x86_64-linux-gnu".\nType "show configuration" for configuration details.\nFor bug reporting instructions, please see:\n<http://www.gnu.org/software/gdb/bugs/>.\nFind the GDB manual and other documentation resources online at:\n<http://www.gnu.org/software/gdb/documentation/>.\nFor help, type "help".\nType "apropos word" to search for commands related to "word"...\nSource directories searched: /opt/sgxsdk/lib64/gdb-sgx-plugin:$cdir:$cwd\nSetting environment variable "LD_PRELOAD" to null value.\nReading symbols from ./app...done.\nwarning: Missing auto-load script at offset 0 in section .debug_gdb_scripts\nof file /root/rust-sgx-sdk/samplecode/hello-rust/bin/app.\nUse `info auto-load python-scripts [REGEXP]\' to list them.\n(gdb) b say_something\nBreakpoint 1 at 0x11800: file app/Enclave_u.c, line 731.\n(gdb) r\nStarting program: /root/rust-sgx-sdk/samplecode/hello-rust/bin/app\ndetect urts is loaded, initializing\n[Thread debugging using libthread_db enabled]\nUsing host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".\n[+] Home dir is /root\n[-] Open token file /root/enclave.token error! Will create one.\nadd-symbol-file \'/root/rust-sgx-sdk/samplecode/hello-rust/bin/enclave.signed.so\' 0x7ffff5805340 -readnow -s .interp 0x7ffff5800270  -s .note.gnu.build-id 0x7ffff580028c  -s .gnu.hash 0x7ffff58002b0  -s .dynsym 0x7ffff58002e0  -s .dynstr 0x7ffff5800388  -s .gnu.version 0x7ffff58003c2  -s .gnu.version_d 0x7ffff58003d0  -s .rela.dyn 0x7ffff5800408  -s .plt 0x7ffff5805310  -s .plt.got 0x7ffff5805320  -s .nipx 0x7ffff5845060  -s .rodata 0x7ffff58458a0  -s .eh_frame_hdr 0x7ffff584ace0  -s .eh_frame 0x7ffff584d4b0  -s .gcc_except_table 0x7ffff5857850  -s .tbss 0x7ffff5a597a0  -s .init_array 0x7ffff5a597a0  -s .fini_array 0x7ffff5a597a8  -s .data.rel.ro 0x7ffff5a59800  -s .dynamic 0x7ffff5a5b000  -s .got 0x7ffff5a5b190  -s .got.plt 0x7ffff5a5c000  -s .data 0x7ffff5a5c020  -s .nipd 0x7ffff5a5cd84  -s .niprod 0x7ffff5a5cdc0  -s .bss 0x7ffff5a5d600\n[+] Saved updated launch token!\n[+] Init Enclave Successful 2!\n\nBreakpoint 1, say_something (eid=2, retval=0x7fffffffe288,\n    some_string=0x5555557c0f00 "This is a normal world string passed into Enclave!\\n", len=51) at app/Enclave_u.c:731\n731\t{\n(gdb)\n')])])]),a("p",[e._v("Look at the automatically triggered "),a("code",[e._v("add-symbol-file")]),e._v(" command. "),a("code",[e._v("sgx-gdb")]),e._v(" helps us load the debug sym automatically. If you can't see this line, it means that "),a("code",[e._v("sgx-gdb")]),e._v(" is not working.")]),e._v(" "),a("p",[e._v("Let's check where it stopped at:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("(gdb) info reg rip\nrip            0x555555565800\t0x555555565800 <say_something>\n")])])]),a("p",[e._v("It stopped at 0x555555565800, not in the enclave. It the place where "),a("code",[e._v("say_something")]),e._v(" located in "),a("code",[e._v("Enclave_u.c")]),e._v(". But we can set another breakpoint at the one inside enclave:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(gdb) info line say_something\nLine 731 of "app/Enclave_u.c" starts at address 0x555555565800 <say_something>\n   and ends at 0x555555565804 <say_something+4>.\nLine 51 of "src/lib.rs" starts at address 0x7ffff5827ab0 <say_something>\n   and ends at 0x7ffff5827ac1 <say_something+17>.\n(gdb) b "src/lib.rs:say_something"\nNote: breakpoint 1 also set at pc 0x7ffff5827ac1.\nBreakpoint 2 at 0x7ffff5827ac1: file src/lib.rs, line 52.\n')])])]),a("p",[e._v("So now bp #2 is the correct bp inside SGX enclave. Continue:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(gdb) c\nContinuing.\n\nBreakpoint 1, say_something (\n    some_string=0x7ffff5a71040 "This is a normal world string passed into Enclave!\\n", some_len=51) at src/lib.rs:52\n(gdb) info reg rip\nrip            0x7ffff5827ac1\t0x7ffff5827ac1 <say_something+17>\n')])])]),a("p",[e._v("That's it! It stopped correctly at the first statement in enclave function "),a("code",[e._v("say_something")]),e._v("! We can do something more using gdb:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('(gdb) n\n54\t    let str_slice = unsafe { slice::from_raw_parts(some_string, some_len) };\n(gdb)\n55\t    let _ = io::stdout().write(str_slice);\n(gdb)\nThis is a normal world string passed into Enclave!\n58\t    let rust_raw_string = "This is a in-Enclave ";\n(gdb) n\n60\t    let word:[u8;4] = [82, 117, 115, 116];\n(gdb) p rust_raw_string\n$1 = {data_ptr = 0x7ffff5847150 "This is a in-Enclave Invalid UTF-8\\n",\n  length = 21}\n')])])]),a("p",[e._v("That's it! Try "),a("code",[e._v("p")]),e._v(" more stuffs!")]),e._v(" "),a("h2",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[e._v("#")]),e._v(" Tips")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/longld/peda",target:"_blank",rel:"noopener noreferrer"}},[e._v("peda")]),e._v(" is helpful with some commands like "),a("code",[e._v("vmmap")]),e._v(".")])])}),[],!1,null,null,null);t.default=n.exports}}]);