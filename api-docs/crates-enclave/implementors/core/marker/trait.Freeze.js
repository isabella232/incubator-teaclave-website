(function() {var implementors = {};
implementors["adler32"] = [{"text":"impl Freeze for RollingAdler32","synthetic":true,"types":[]}];
implementors["aho_corasick"] = [{"text":"impl&lt;S&gt; Freeze for AhoCorasick&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for AhoCorasickBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindIter&lt;'a, 'b, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b, S&gt; Freeze for FindOverlappingIter&lt;'a, 'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, R, S&gt; Freeze for StreamFindIter&lt;'a, R, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl&lt;'s, 'h&gt; Freeze for FindIter&lt;'s, 'h&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Searcher","synthetic":true,"types":[]},{"text":"impl Freeze for MatchKind","synthetic":true,"types":[]}];
implementors["anyhow"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["base64"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for CharacterSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Base64Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for DecoderReader&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for EncoderWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for EncoderStringWriter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["bit_vec"] = [{"text":"impl&lt;B&gt; Freeze for BitVec&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for Iter&lt;'a, B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for IntoIter&lt;B&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, B&gt; Freeze for Blocks&lt;'a, B&gt;","synthetic":true,"types":[]}];
implementors["byteorder"] = [{"text":"impl Freeze for BigEndian","synthetic":true,"types":[]},{"text":"impl Freeze for LittleEndian","synthetic":true,"types":[]}];
implementors["bytes"] = [{"text":"impl Freeze for BytesMut","synthetic":true,"types":[]},{"text":"impl !Freeze for Bytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Limit&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Reader&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Writer&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["chrono"] = [{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for Date&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Tz&gt; Freeze for DateTime&lt;Tz&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Tz as TimeZone&gt;::Offset: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseWeekdayError","synthetic":true,"types":[]},{"text":"impl Freeze for SecondsFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Weekday","synthetic":true,"types":[]},{"text":"impl Freeze for FixedOffset","synthetic":true,"types":[]},{"text":"impl Freeze for Utc","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LocalResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDate","synthetic":true,"types":[]},{"text":"impl Freeze for IsoWeek","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveTime","synthetic":true,"types":[]},{"text":"impl Freeze for NaiveDateTime","synthetic":true,"types":[]},{"text":"impl Freeze for Parsed","synthetic":true,"types":[]},{"text":"impl Freeze for InternalNumeric","synthetic":true,"types":[]},{"text":"impl Freeze for InternalFixed","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for DelayedFormat&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Pad","synthetic":true,"types":[]},{"text":"impl Freeze for Numeric","synthetic":true,"types":[]},{"text":"impl Freeze for Fixed","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Item&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrftimeItems&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["color_quant"] = [{"text":"impl Freeze for NeuQuant","synthetic":true,"types":[]}];
implementors["crc"] = [{"text":"impl Freeze for CalcType","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]}];
implementors["crc32fast"] = [{"text":"impl Freeze for Hasher","synthetic":true,"types":[]}];
implementors["deflate"] = [{"text":"impl Freeze for CompressionOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialOptions","synthetic":true,"types":[]},{"text":"impl Freeze for MatchingType","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DeflateEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ZlibEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["either"] = [{"text":"impl&lt;L, R&gt; Freeze for Either&lt;L, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["env_logger"] = [{"text":"impl&lt;'a&gt; Freeze for Env&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Logger","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Target","synthetic":true,"types":[]},{"text":"impl Freeze for WriteStyle","synthetic":true,"types":[]},{"text":"impl !Freeze for Filter","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Style","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for StyledValue&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Formatter","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for TimestampPrecision","synthetic":true,"types":[]}];
implementors["fnv"] = [{"text":"impl Freeze for FnvHasher","synthetic":true,"types":[]}];
implementors["gbdt"] = [{"text":"impl&lt;T&gt; Freeze for BinaryTreeNode&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BinaryTree&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Loss","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for TrainingCache","synthetic":true,"types":[]},{"text":"impl Freeze for DecisionTree","synthetic":true,"types":[]},{"text":"impl Freeze for GBDT","synthetic":true,"types":[]},{"text":"impl Freeze for InputFormat","synthetic":true,"types":[]},{"text":"impl Freeze for FileFormat","synthetic":true,"types":[]}];
implementors["getrandom"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["gif"] = [{"text":"impl&lt;'a&gt; Freeze for Frame&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for MemoryLimit","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Extension","synthetic":true,"types":[]},{"text":"impl Freeze for DisposalMethod","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Decoded&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorOutput","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl Freeze for ExtensionData","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]}];
implementors["hashbrown"] = [{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["hashbrown_tstd"] = [{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for TryReserveError","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for OccupiedEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for VacantEntry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultHashBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for Entry&lt;'a, K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RustcOccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RustcVacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for RustcEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Freeze for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]}];
implementors["hex"] = [{"text":"impl Freeze for FromHexError","synthetic":true,"types":[]}];
implementors["http"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Extensions","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for GetAll&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HeaderMap&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Keys&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for OccupiedEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for VacantEntry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueDrain&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValueIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Values&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ValuesMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderName","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderName","synthetic":true,"types":[]},{"text":"impl !Freeze for HeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidHeaderValue","synthetic":true,"types":[]},{"text":"impl Freeze for ToStrError","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; !Freeze for Entry&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Method","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidMethod","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Request&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Response&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidStatusCode","synthetic":true,"types":[]},{"text":"impl !Freeze for Authority","synthetic":true,"types":[]},{"text":"impl !Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for PathAndQuery","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Port&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Scheme","synthetic":true,"types":[]},{"text":"impl !Freeze for Uri","synthetic":true,"types":[]},{"text":"impl !Freeze for Parts","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUri","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidUriParts","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]}];
implementors["httparse"] = [{"text":"impl Freeze for InvalidChunkSize","synthetic":true,"types":[]},{"text":"impl Freeze for ParserConfig","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Request&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'headers, 'buf&gt; Freeze for Response&lt;'headers, 'buf&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Header&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Status&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["humantime"] = [{"text":"impl Freeze for FormattedDuration","synthetic":true,"types":[]},{"text":"impl Freeze for Duration","synthetic":true,"types":[]},{"text":"impl Freeze for Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Rfc3339Timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["idna"] = [{"text":"impl Freeze for Config","synthetic":true,"types":[]},{"text":"impl Freeze for Errors","synthetic":true,"types":[]}];
implementors["image"] = [{"text":"impl&lt;T&gt; Freeze for Luma&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LumaA&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rgb&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Rgba&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bgr&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Bgra&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I:&nbsp;?Sized&gt; Freeze for Pixels&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for SubImage&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, Container&gt; Freeze for ImageBuffer&lt;P, Container&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Container: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Frames&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ColorType","synthetic":true,"types":[]},{"text":"impl Freeze for ImageError","synthetic":true,"types":[]},{"text":"impl Freeze for FilterType","synthetic":true,"types":[]},{"text":"impl Freeze for ImageFormat","synthetic":true,"types":[]},{"text":"impl Freeze for ImageOutputFormat","synthetic":true,"types":[]},{"text":"impl Freeze for DynamicImage","synthetic":true,"types":[]},{"text":"impl Freeze for Rect","synthetic":true,"types":[]},{"text":"impl Freeze for NeuQuant","synthetic":true,"types":[]},{"text":"impl Freeze for BiLevel","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer&gt; Freeze for FlatSamples&lt;Buffer&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SampleLayout","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Freeze for View&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Buffer, P&gt; Freeze for ViewMut&lt;Buffer, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for NormalForm","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BMPDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for BMPEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DXTDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DXTReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for DXTEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DXTVariant","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for GifReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ICODecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for ICOEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for JPEGDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for JPEGEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PNGReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PNGDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PNGEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for PNMDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for PNMEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ArbitraryHeader","synthetic":true,"types":[]},{"text":"impl Freeze for BitmapHeader","synthetic":true,"types":[]},{"text":"impl Freeze for GraymapHeader","synthetic":true,"types":[]},{"text":"impl Freeze for PixmapHeader","synthetic":true,"types":[]},{"text":"impl Freeze for PNMHeader","synthetic":true,"types":[]},{"text":"impl Freeze for ArbitraryTuplType","synthetic":true,"types":[]},{"text":"impl Freeze for PNMSubtype","synthetic":true,"types":[]},{"text":"impl Freeze for SampleEncoding","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for TGADecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for TIFFDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for TiffReader&lt;R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for WebpDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Frame","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for VP8Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["inflate"] = [{"text":"impl&lt;W&gt; Freeze for InflateWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DeflateDecoderBuf&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for InflateStream","synthetic":true,"types":[]}];
implementors["itertools"] = [{"text":"impl&lt;I, J&gt; Freeze for Diff&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxResult&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Position&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A, B&gt; Freeze for EitherOrBoth&lt;A, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FoldWhile&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, Pred&gt; Freeze for DedupBy&lt;I, Pred&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Pred: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Interleave&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for InterleaveShortest&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for Product&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for PutBack&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Batching&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, R&gt; Freeze for MapInto&lt;I, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for MapResults&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for TakeWhileRef&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WhileSome&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Coalesce&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleCombinations&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as HasCombination&lt;I&gt;&gt;::Combination: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Positions&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for Update&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Step&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ConsTuples&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for ExactlyOneError&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I&gt; !Freeze for Format&lt;'a, I&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; !Freeze for FormatWith&lt;'a, I, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Intersperse&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J, F&gt; Freeze for MergeJoinBy&lt;I, J, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;J as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, F&gt; Freeze for PadUsing&lt;I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, F&gt; Freeze for PeekingTakeWhile&lt;'a, I, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, I, E&gt; Freeze for ProcessResults&lt;'a, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RepeatN&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for RepeatCall&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Unfold&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;St, F&gt; Freeze for Iterate&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;St: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TupleBuffer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for TupleWindows&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, T&gt; Freeze for Tuples&lt;I, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;T as TupleCollect&gt;::Buffer: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for WithPosition&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;I as Iterator&gt;::Item: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I, J&gt; Freeze for ZipEq&lt;I, J&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;J: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for ZipLongest&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Zip&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["itoa"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["jpeg_decoder"] = [{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ImageInfo","synthetic":true,"types":[]},{"text":"impl Freeze for PixelFormat","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for UnsupportedFeature","synthetic":true,"types":[]}];
implementors["jsonwebtoken"] = [{"text":"impl&lt;'a&gt; Freeze for DecodingKey&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TokenData&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingKey","synthetic":true,"types":[]},{"text":"impl Freeze for Header","synthetic":true,"types":[]},{"text":"impl Freeze for Validation","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]}];
implementors["libc"] = [{"text":"impl Freeze for group","synthetic":true,"types":[]},{"text":"impl Freeze for utimbuf","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit","synthetic":true,"types":[]},{"text":"impl Freeze for rusage","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for itimerval","synthetic":true,"types":[]},{"text":"impl Freeze for tms","synthetic":true,"types":[]},{"text":"impl Freeze for servent","synthetic":true,"types":[]},{"text":"impl Freeze for protoent","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq_source","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for sched_param","synthetic":true,"types":[]},{"text":"impl Freeze for Dl_info","synthetic":true,"types":[]},{"text":"impl Freeze for lconv","synthetic":true,"types":[]},{"text":"impl Freeze for in_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for ifaddrs","synthetic":true,"types":[]},{"text":"impl Freeze for in6_rtmsg","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq","synthetic":true,"types":[]},{"text":"impl Freeze for arpreq_old","synthetic":true,"types":[]},{"text":"impl Freeze for arphdr","synthetic":true,"types":[]},{"text":"impl Freeze for mmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for utsname","synthetic":true,"types":[]},{"text":"impl Freeze for sigevent","synthetic":true,"types":[]},{"text":"impl Freeze for rlimit64","synthetic":true,"types":[]},{"text":"impl Freeze for glob_t","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for spwd","synthetic":true,"types":[]},{"text":"impl Freeze for dqblk","synthetic":true,"types":[]},{"text":"impl Freeze for signalfd_siginfo","synthetic":true,"types":[]},{"text":"impl Freeze for itimerspec","synthetic":true,"types":[]},{"text":"impl Freeze for fsid_t","synthetic":true,"types":[]},{"text":"impl Freeze for packet_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for if_nameindex","synthetic":true,"types":[]},{"text":"impl Freeze for msginfo","synthetic":true,"types":[]},{"text":"impl Freeze for sembuf","synthetic":true,"types":[]},{"text":"impl Freeze for input_event","synthetic":true,"types":[]},{"text":"impl Freeze for input_id","synthetic":true,"types":[]},{"text":"impl Freeze for input_absinfo","synthetic":true,"types":[]},{"text":"impl Freeze for input_keymap_entry","synthetic":true,"types":[]},{"text":"impl Freeze for input_mask","synthetic":true,"types":[]},{"text":"impl Freeze for ff_replay","synthetic":true,"types":[]},{"text":"impl Freeze for ff_trigger","synthetic":true,"types":[]},{"text":"impl Freeze for ff_envelope","synthetic":true,"types":[]},{"text":"impl Freeze for ff_constant_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_ramp_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_condition_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_periodic_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_rumble_effect","synthetic":true,"types":[]},{"text":"impl Freeze for ff_effect","synthetic":true,"types":[]},{"text":"impl Freeze for uinput_ff_upload","synthetic":true,"types":[]},{"text":"impl Freeze for uinput_ff_erase","synthetic":true,"types":[]},{"text":"impl Freeze for uinput_abs_setup","synthetic":true,"types":[]},{"text":"impl Freeze for dl_phdr_info","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Ehdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Sym","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Phdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Shdr","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for mntent","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawn_file_actions_t","synthetic":true,"types":[]},{"text":"impl Freeze for posix_spawnattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for genlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for arpd_request","synthetic":true,"types":[]},{"text":"impl Freeze for inotify_event","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_response","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_vm","synthetic":true,"types":[]},{"text":"impl Freeze for regmatch_t","synthetic":true,"types":[]},{"text":"impl Freeze for sock_extended_err","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_tp","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_j1939","synthetic":true,"types":[]},{"text":"impl Freeze for can_filter","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_alg","synthetic":true,"types":[]},{"text":"impl Freeze for uinput_setup","synthetic":true,"types":[]},{"text":"impl Freeze for uinput_user_dev","synthetic":true,"types":[]},{"text":"impl Freeze for af_alg_iv","synthetic":true,"types":[]},{"text":"impl Freeze for mq_attr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_can","synthetic":true,"types":[]},{"text":"impl Freeze for statx","synthetic":true,"types":[]},{"text":"impl Freeze for statx_timestamp","synthetic":true,"types":[]},{"text":"impl Freeze for aiocb","synthetic":true,"types":[]},{"text":"impl Freeze for __exit_status","synthetic":true,"types":[]},{"text":"impl Freeze for __timeval","synthetic":true,"types":[]},{"text":"impl Freeze for glob64_t","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for termios","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo","synthetic":true,"types":[]},{"text":"impl Freeze for mallinfo2","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlmsgerr","synthetic":true,"types":[]},{"text":"impl Freeze for nl_pktinfo","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_req","synthetic":true,"types":[]},{"text":"impl Freeze for nl_mmap_hdr","synthetic":true,"types":[]},{"text":"impl Freeze for nlattr","synthetic":true,"types":[]},{"text":"impl Freeze for rtentry","synthetic":true,"types":[]},{"text":"impl Freeze for timex","synthetic":true,"types":[]},{"text":"impl Freeze for ntptimeval","synthetic":true,"types":[]},{"text":"impl Freeze for regex_t","synthetic":true,"types":[]},{"text":"impl Freeze for Elf64_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for Elf32_Chdr","synthetic":true,"types":[]},{"text":"impl Freeze for utmpx","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sysinfo","synthetic":true,"types":[]},{"text":"impl Freeze for msqid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for statfs","synthetic":true,"types":[]},{"text":"impl Freeze for flock","synthetic":true,"types":[]},{"text":"impl Freeze for flock64","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for stack_t","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for statfs64","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs64","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpxreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_xmmreg","synthetic":true,"types":[]},{"text":"impl Freeze for _libc_fpstate","synthetic":true,"types":[]},{"text":"impl Freeze for user_regs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for user","synthetic":true,"types":[]},{"text":"impl Freeze for mcontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for ipc_perm","synthetic":true,"types":[]},{"text":"impl Freeze for shmid_ds","synthetic":true,"types":[]},{"text":"impl Freeze for termios2","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreqn","synthetic":true,"types":[]},{"text":"impl Freeze for user_fpregs_struct","synthetic":true,"types":[]},{"text":"impl Freeze for ucontext_t","synthetic":true,"types":[]},{"text":"impl Freeze for statvfs","synthetic":true,"types":[]},{"text":"impl Freeze for max_align_t","synthetic":true,"types":[]},{"text":"impl Freeze for sem_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutexattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_condattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for fanotify_event_metadata","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for can_frame","synthetic":true,"types":[]},{"text":"impl Freeze for canfd_frame","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for __c_anonymous_sockaddr_can_can_addr","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]},{"text":"impl Freeze for FILE","synthetic":true,"types":[]},{"text":"impl Freeze for fpos_t","synthetic":true,"types":[]},{"text":"impl Freeze for timezone","synthetic":true,"types":[]},{"text":"impl Freeze for fpos64_t","synthetic":true,"types":[]}];
implementors["log"] = [{"text":"impl&lt;'a&gt; Freeze for Record&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for RecordBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Metadata&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for MetadataBuilder&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SetLoggerError","synthetic":true,"types":[]},{"text":"impl Freeze for ParseLevelError","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for LevelFilter","synthetic":true,"types":[]}];
implementors["lzw"] = [{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for DecoderEarlyChange&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for LsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for LsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for MsbReader","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for MsbWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Bits","synthetic":true,"types":[]}];
implementors["memchr"] = [{"text":"impl&lt;'a&gt; Freeze for Memchr&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr2&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Memchr3&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["miniz_oxide"] = [{"text":"impl Freeze for StreamResult","synthetic":true,"types":[]},{"text":"impl Freeze for MZFlush","synthetic":true,"types":[]},{"text":"impl Freeze for MZStatus","synthetic":true,"types":[]},{"text":"impl Freeze for MZError","synthetic":true,"types":[]},{"text":"impl Freeze for DataFormat","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionLevel","synthetic":true,"types":[]},{"text":"impl Freeze for CompressorOxide","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for CallbackFunc&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionStrategy","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLFlush","synthetic":true,"types":[]},{"text":"impl Freeze for TDEFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for TINFLStatus","synthetic":true,"types":[]},{"text":"impl Freeze for DecompressorOxide","synthetic":true,"types":[]},{"text":"impl Freeze for InflateState","synthetic":true,"types":[]}];
implementors["num_bigint"] = [{"text":"impl Freeze for ParseBigIntError","synthetic":true,"types":[]},{"text":"impl Freeze for BigUint","synthetic":true,"types":[]},{"text":"impl Freeze for BigInt","synthetic":true,"types":[]},{"text":"impl Freeze for Sign","synthetic":true,"types":[]}];
implementors["num_complex"] = [{"text":"impl&lt;T&gt; Freeze for Complex&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for ParseComplexError&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_integer"] = [{"text":"impl&lt;A&gt; Freeze for ExtendedGcd&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IterBinomial&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_iter"] = [{"text":"impl&lt;A&gt; Freeze for Range&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStep&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for RangeStepInclusive&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["num_rational"] = [{"text":"impl&lt;T&gt; Freeze for Ratio&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ParseRatioError","synthetic":true,"types":[]}];
implementors["num_traits"] = [{"text":"impl Freeze for ParseFloatError","synthetic":true,"types":[]},{"text":"impl Freeze for FloatErrorKind","synthetic":true,"types":[]}];
implementors["once_cell"] = [{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for OnceCell&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, F&nbsp;=&nbsp;fn() -&gt; T&gt; !Freeze for Lazy&lt;T, F&gt;","synthetic":true,"types":[]}];
implementors["pem"] = [{"text":"impl Freeze for EncodeConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Pem","synthetic":true,"types":[]},{"text":"impl Freeze for PemError","synthetic":true,"types":[]},{"text":"impl Freeze for LineEnding","synthetic":true,"types":[]}];
implementors["percent_encoding"] = [{"text":"impl Freeze for AsciiSet","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentEncode&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PercentDecode&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["png"] = [{"text":"impl Freeze for PixelDimensions","synthetic":true,"types":[]},{"text":"impl Freeze for FrameControl","synthetic":true,"types":[]},{"text":"impl Freeze for AnimationControl","synthetic":true,"types":[]},{"text":"impl Freeze for Info","synthetic":true,"types":[]},{"text":"impl Freeze for Transformations","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for OutputInfo","synthetic":true,"types":[]},{"text":"impl Freeze for StreamingDecoder","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Encoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for StreamWriter&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ColorType","synthetic":true,"types":[]},{"text":"impl Freeze for BitDepth","synthetic":true,"types":[]},{"text":"impl Freeze for Unit","synthetic":true,"types":[]},{"text":"impl Freeze for DisposeOp","synthetic":true,"types":[]},{"text":"impl Freeze for BlendOp","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for Decoded","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodingError","synthetic":true,"types":[]},{"text":"impl Freeze for FilterType","synthetic":true,"types":[]}];
implementors["ppv_lite86"] = [{"text":"impl Freeze for YesS3","synthetic":true,"types":[]},{"text":"impl Freeze for NoS3","synthetic":true,"types":[]},{"text":"impl Freeze for YesS4","synthetic":true,"types":[]},{"text":"impl Freeze for NoS4","synthetic":true,"types":[]},{"text":"impl Freeze for YesA1","synthetic":true,"types":[]},{"text":"impl Freeze for NoA1","synthetic":true,"types":[]},{"text":"impl Freeze for YesA2","synthetic":true,"types":[]},{"text":"impl Freeze for NoA2","synthetic":true,"types":[]},{"text":"impl Freeze for YesNI","synthetic":true,"types":[]},{"text":"impl Freeze for NoNI","synthetic":true,"types":[]},{"text":"impl&lt;S3, S4, NI&gt; Freeze for SseMachine&lt;S3, S4, NI&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NI&gt; Freeze for Avx2Machine&lt;NI&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for vec128_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec256_storage","synthetic":true,"types":[]},{"text":"impl Freeze for vec512_storage","synthetic":true,"types":[]}];
implementors["proc_macro2"] = [{"text":"impl Freeze for TokenStream","synthetic":true,"types":[]},{"text":"impl Freeze for LexError","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Punct","synthetic":true,"types":[]},{"text":"impl Freeze for Ident","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for TokenTree","synthetic":true,"types":[]},{"text":"impl Freeze for Delimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Spacing","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]}];
implementors["prost"] = [{"text":"impl Freeze for DecodeError","synthetic":true,"types":[]},{"text":"impl Freeze for EncodeError","synthetic":true,"types":[]}];
implementors["protected_fs"] = [{"text":"impl Freeze for ProtectedFile","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]}];
implementors["quick_error"] = [{"text":"impl&lt;X, E&gt; Freeze for Context&lt;X, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rand"] = [{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Open01","synthetic":true,"types":[]},{"text":"impl Freeze for OpenClosed01","synthetic":true,"types":[]},{"text":"impl Freeze for Alphanumeric","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Uniform&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Cauchy","synthetic":true,"types":[]},{"text":"impl Freeze for Dirichlet","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Beta","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Pareto","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for Triangular","synthetic":true,"types":[]},{"text":"impl Freeze for UnitCircle","synthetic":true,"types":[]},{"text":"impl Freeze for UnitSphereSurface","synthetic":true,"types":[]},{"text":"impl Freeze for Weibull","synthetic":true,"types":[]},{"text":"impl&lt;D, R, T&gt; Freeze for DistIter&lt;D, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Standard","synthetic":true,"types":[]},{"text":"impl Freeze for BernoulliError","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformInt&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for UniformFloat&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UniformDuration","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for WeightedIndex&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;X as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for WeightedError","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for WeightedIndex&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;W as SampleUniform&gt;::Sampler: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for EntropyRng","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl Freeze for ReadError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StepRng","synthetic":true,"types":[]},{"text":"impl&lt;'a, S:&nbsp;?Sized, T&gt; Freeze for SliceChooseIter&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVec","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IndexVecIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IndexVecIntoIter","synthetic":true,"types":[]}];
implementors["rand_chacha"] = [{"text":"impl Freeze for ChaCha12Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha12Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha20Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Core","synthetic":true,"types":[]},{"text":"impl Freeze for ChaCha8Rng","synthetic":true,"types":[]}];
implementors["rand_core"] = [{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for OsRng","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R:&nbsp;?Sized&gt; Freeze for BlockRng64&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;R as BlockRngCore&gt;::Results: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rdrand"] = [{"text":"impl Freeze for RdRand","synthetic":true,"types":[]},{"text":"impl Freeze for RdSeed","synthetic":true,"types":[]}];
implementors["regex"] = [{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for RegexBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegexSetBuilder","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Match&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Regex","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Matches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for CaptureMatches&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for Split&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r, 't&gt; Freeze for SplitN&lt;'r, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'r&gt; Freeze for CaptureNames&lt;'r&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureLocations","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for Captures&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 't&gt; Freeze for SubCaptureMatches&lt;'c, 't&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R:&nbsp;?Sized&gt; Freeze for ReplacerRef&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'t&gt; Freeze for NoExpand&lt;'t&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for RegexSet","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatches","synthetic":true,"types":[]},{"text":"impl Freeze for SetMatchesIntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SetMatchesIter&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["regex_syntax"] = [{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UnicodeWordError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Span","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl Freeze for WithComments","synthetic":true,"types":[]},{"text":"impl Freeze for Comment","synthetic":true,"types":[]},{"text":"impl Freeze for Alternation","synthetic":true,"types":[]},{"text":"impl Freeze for Concat","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerl","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAscii","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBracketed","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOp","synthetic":true,"types":[]},{"text":"impl Freeze for Assertion","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionOp","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for CaptureName","synthetic":true,"types":[]},{"text":"impl Freeze for SetFlags","synthetic":true,"types":[]},{"text":"impl Freeze for Flags","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItem","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for Ast","synthetic":true,"types":[]},{"text":"impl Freeze for LiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for SpecialLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for HexLiteralKind","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for ClassPerlKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassAsciiKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSet","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetItem","synthetic":true,"types":[]},{"text":"impl Freeze for ClassSetBinaryOpKind","synthetic":true,"types":[]},{"text":"impl Freeze for AssertionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for FlagsItemKind","synthetic":true,"types":[]},{"text":"impl Freeze for Flag","synthetic":true,"types":[]},{"text":"impl Freeze for ParserBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Parser","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for CaseFoldError","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hir","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicode","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassUnicodeIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassUnicodeRange","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytes","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ClassBytesIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ClassBytesRange","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for Repetition","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for HirKind","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Class","synthetic":true,"types":[]},{"text":"impl Freeze for Anchor","synthetic":true,"types":[]},{"text":"impl Freeze for WordBoundary","synthetic":true,"types":[]},{"text":"impl Freeze for GroupKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionKind","synthetic":true,"types":[]},{"text":"impl Freeze for RepetitionRange","synthetic":true,"types":[]},{"text":"impl Freeze for Literals","synthetic":true,"types":[]},{"text":"impl Freeze for Literal","synthetic":true,"types":[]},{"text":"impl Freeze for Printer","synthetic":true,"types":[]},{"text":"impl Freeze for TranslatorBuilder","synthetic":true,"types":[]},{"text":"impl !Freeze for Translator","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Range","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequences","synthetic":true,"types":[]},{"text":"impl Freeze for Utf8Sequence","synthetic":true,"types":[]}];
implementors["ring"] = [{"text":"impl Freeze for TestCase","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for File&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nonce","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for OpeningKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;N&gt; Freeze for SealingKey&lt;N&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;N: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for Aad&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for UnboundKey","synthetic":true,"types":[]},{"text":"impl Freeze for LessSafeKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for SealingKey","synthetic":true,"types":[]},{"text":"impl Freeze for OpeningKey","synthetic":true,"types":[]},{"text":"impl Freeze for HeaderProtectionKey","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EphemeralPrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for PublicKey","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Positive&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Digest","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Ed25519KeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EdDSAParameters","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaSigningAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for EcdsaVerificationAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Unspecified","synthetic":true,"types":[]},{"text":"impl Freeze for KeyRejected","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Salt","synthetic":true,"types":[]},{"text":"impl Freeze for Prk","synthetic":true,"types":[]},{"text":"impl&lt;'a, L&gt; Freeze for Okm&lt;'a, L&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;L: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Key","synthetic":true,"types":[]},{"text":"impl Freeze for Context","synthetic":true,"types":[]},{"text":"impl Freeze for Algorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Document","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Random&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for SystemRandom","synthetic":true,"types":[]},{"text":"impl Freeze for RsaParameters","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for RsaPublicKeyComponents&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RsaKeyPair","synthetic":true,"types":[]},{"text":"impl Freeze for RsaSubjectPublicKey","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for UnparsedPublicKey&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rulinalg"] = [{"text":"impl&lt;T&gt; Freeze for AbsoluteElementwiseComparator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ExactElementwiseComparator","synthetic":true,"types":[]},{"text":"impl Freeze for UlpElementwiseComparator","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FloatElementwiseComparator&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PermutationMatrix&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Matrix&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for MatrixSlice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for MatrixSliceMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Row&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RowMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Rows&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for RowsMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Column&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ColumnMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Cols&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for ColsMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, M&gt; Freeze for Diagonal&lt;'a, T, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, M&gt; Freeze for DiagonalMut&lt;'a, T, M&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SliceIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SliceIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Parity","synthetic":true,"types":[]},{"text":"impl Freeze for Axes","synthetic":true,"types":[]},{"text":"impl Freeze for DiagOffset","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for HouseholderComposition&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PartialPivLu&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LUP&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for FullPivLu&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for LUPQ&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cholesky&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for HouseholderQr&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for QR&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for ThinQR&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Vector&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UlpComparisonResult","synthetic":true,"types":[]},{"text":"impl Freeze for Euclidean","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Lp&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["rustface"] = [{"text":"impl Freeze for FaceInfo","synthetic":true,"types":[]},{"text":"impl Freeze for ImageData","synthetic":true,"types":[]},{"text":"impl Freeze for Model","synthetic":true,"types":[]}];
implementors["rustls"] = [{"text":"impl&lt;'a, S:&nbsp;?Sized, T:&nbsp;?Sized&gt; Freeze for Stream&lt;'a, S, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; Freeze for StreamOwned&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RootCertStore","synthetic":true,"types":[]},{"text":"impl Freeze for NoClientSessionStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for ClientSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Freeze for ClientConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ClientSession","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for WriteEarlyData&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for NoServerSessionStorage","synthetic":true,"types":[]},{"text":"impl !Freeze for ServerSessionMemoryCache","synthetic":true,"types":[]},{"text":"impl Freeze for ServerConfig","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSession","synthetic":true,"types":[]},{"text":"impl Freeze for ResolvesServerCertUsingSNI","synthetic":true,"types":[]},{"text":"impl Freeze for Ticketer","synthetic":true,"types":[]},{"text":"impl Freeze for NoClientAuth","synthetic":true,"types":[]},{"text":"impl Freeze for AllowAnyAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Freeze for AllowAnyAnonymousOrAuthenticatedClient","synthetic":true,"types":[]},{"text":"impl Freeze for SupportedCipherSuite","synthetic":true,"types":[]},{"text":"impl Freeze for Certificate","synthetic":true,"types":[]},{"text":"impl Freeze for PrivateKey","synthetic":true,"types":[]},{"text":"impl Freeze for NoKeyLog","synthetic":true,"types":[]},{"text":"impl !Freeze for KeyLogFile","synthetic":true,"types":[]},{"text":"impl Freeze for ServerCertVerified","synthetic":true,"types":[]},{"text":"impl Freeze for ClientCertVerified","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DangerousClientConfig&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ProtocolVersion","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureScheme","synthetic":true,"types":[]},{"text":"impl Freeze for CipherSuite","synthetic":true,"types":[]},{"text":"impl Freeze for TLSError","synthetic":true,"types":[]},{"text":"impl Freeze for BulkAlgorithm","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for u24","synthetic":true,"types":[]},{"text":"impl Freeze for Payload","synthetic":true,"types":[]},{"text":"impl Freeze for PayloadU24","synthetic":true,"types":[]},{"text":"impl Freeze for PayloadU16","synthetic":true,"types":[]},{"text":"impl Freeze for PayloadU8","synthetic":true,"types":[]},{"text":"impl Freeze for HashAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for ClientCertificateType","synthetic":true,"types":[]},{"text":"impl Freeze for Compression","synthetic":true,"types":[]},{"text":"impl Freeze for ContentType","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeType","synthetic":true,"types":[]},{"text":"impl Freeze for AlertLevel","synthetic":true,"types":[]},{"text":"impl Freeze for AlertDescription","synthetic":true,"types":[]},{"text":"impl Freeze for HeartbeatMessageType","synthetic":true,"types":[]},{"text":"impl Freeze for ExtensionType","synthetic":true,"types":[]},{"text":"impl Freeze for ServerNameType","synthetic":true,"types":[]},{"text":"impl Freeze for NamedCurve","synthetic":true,"types":[]},{"text":"impl Freeze for NamedGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ECPointFormat","synthetic":true,"types":[]},{"text":"impl Freeze for HeartbeatMode","synthetic":true,"types":[]},{"text":"impl Freeze for ECCurveType","synthetic":true,"types":[]},{"text":"impl Freeze for PSKKeyExchangeMode","synthetic":true,"types":[]},{"text":"impl Freeze for KeyUpdateRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateStatusType","synthetic":true,"types":[]},{"text":"impl Freeze for AlertMessagePayload","synthetic":true,"types":[]},{"text":"impl Freeze for Random","synthetic":true,"types":[]},{"text":"impl Freeze for SessionID","synthetic":true,"types":[]},{"text":"impl Freeze for UnknownExtension","synthetic":true,"types":[]},{"text":"impl Freeze for ServerName","synthetic":true,"types":[]},{"text":"impl Freeze for KeyShareEntry","synthetic":true,"types":[]},{"text":"impl Freeze for PresharedKeyIdentity","synthetic":true,"types":[]},{"text":"impl Freeze for PresharedKeyOffer","synthetic":true,"types":[]},{"text":"impl Freeze for OCSPCertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ClientHelloPayload","synthetic":true,"types":[]},{"text":"impl Freeze for HelloRetryRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ServerHelloPayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateEntry","synthetic":true,"types":[]},{"text":"impl Freeze for CertificatePayloadTLS13","synthetic":true,"types":[]},{"text":"impl Freeze for ECParameters","synthetic":true,"types":[]},{"text":"impl Freeze for DigitallySignedStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ClientECDHParams","synthetic":true,"types":[]},{"text":"impl Freeze for ServerECDHParams","synthetic":true,"types":[]},{"text":"impl Freeze for ECDHEServerKeyExchange","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateRequestPayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateRequestPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Freeze for NewSessionTicketPayload","synthetic":true,"types":[]},{"text":"impl Freeze for NewSessionTicketPayloadTLS13","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateStatus","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeMessagePayload","synthetic":true,"types":[]},{"text":"impl Freeze for ServerNamePayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ClientExtension","synthetic":true,"types":[]},{"text":"impl Freeze for ServerExtension","synthetic":true,"types":[]},{"text":"impl Freeze for HelloRetryExtension","synthetic":true,"types":[]},{"text":"impl Freeze for CertificateExtension","synthetic":true,"types":[]},{"text":"impl Freeze for KeyExchangeAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for ServerKeyExchangePayload","synthetic":true,"types":[]},{"text":"impl Freeze for CertReqExtension","synthetic":true,"types":[]},{"text":"impl Freeze for NewSessionTicketExtension","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakePayload","synthetic":true,"types":[]},{"text":"impl Freeze for ChangeCipherSpecPayload","synthetic":true,"types":[]},{"text":"impl Freeze for Message","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for BorrowMessage&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for MessagePayload","synthetic":true,"types":[]},{"text":"impl Freeze for ClientSessionKey","synthetic":true,"types":[]},{"text":"impl Freeze for ClientSessionValue","synthetic":true,"types":[]},{"text":"impl Freeze for ServerSessionValue","synthetic":true,"types":[]},{"text":"impl Freeze for MessageDeframer","synthetic":true,"types":[]},{"text":"impl Freeze for MessageFragmenter","synthetic":true,"types":[]},{"text":"impl Freeze for HandshakeJoiner","synthetic":true,"types":[]},{"text":"impl Freeze for CertifiedKey","synthetic":true,"types":[]},{"text":"impl Freeze for RSASigningKey","synthetic":true,"types":[]}];
implementors["rusty_leveldb"] = [{"text":"impl Freeze for DefaultCmp","synthetic":true,"types":[]},{"text":"impl Freeze for DBIterator","synthetic":true,"types":[]},{"text":"impl Freeze for Status","synthetic":true,"types":[]},{"text":"impl Freeze for BloomPolicy","synthetic":true,"types":[]},{"text":"impl Freeze for MemEnv","synthetic":true,"types":[]},{"text":"impl Freeze for Options","synthetic":true,"types":[]},{"text":"impl Freeze for SkipMap","synthetic":true,"types":[]},{"text":"impl Freeze for WriteBatch","synthetic":true,"types":[]},{"text":"impl Freeze for DB","synthetic":true,"types":[]},{"text":"impl Freeze for PosixDiskEnv","synthetic":true,"types":[]},{"text":"impl Freeze for StatusCode","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionType","synthetic":true,"types":[]}];
implementors["rusty_machine"] = [{"text":"impl&lt;T&gt; Freeze for MinMaxFitter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for MinMaxScaler&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, M&gt; Freeze for Normalizer&lt;T, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for StandardizerFitter&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Standardizer&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Shuffler&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DBSCAN","synthetic":true,"types":[]},{"text":"impl&lt;C&gt; Freeze for GenLinearModel&lt;C&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;C: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Logit","synthetic":true,"types":[]},{"text":"impl Freeze for Log","synthetic":true,"types":[]},{"text":"impl Freeze for Identity","synthetic":true,"types":[]},{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Binomial","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for Poisson","synthetic":true,"types":[]},{"text":"impl Freeze for GaussianMixtureModel","synthetic":true,"types":[]},{"text":"impl Freeze for CovOption","synthetic":true,"types":[]},{"text":"impl Freeze for LinRegressor","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for LogisticRegressor&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BaseLogisticRegressor","synthetic":true,"types":[]},{"text":"impl&lt;InitAlg&gt; Freeze for KMeansClassifier&lt;InitAlg&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;InitAlg: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Forgy","synthetic":true,"types":[]},{"text":"impl Freeze for RandomPartition","synthetic":true,"types":[]},{"text":"impl Freeze for KPlusPlus","synthetic":true,"types":[]},{"text":"impl&lt;T, A&gt; Freeze for NeuralNet&lt;T, A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for BaseNeuralNet&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for BCECriterion","synthetic":true,"types":[]},{"text":"impl Freeze for MSECriterion","synthetic":true,"types":[]},{"text":"impl Freeze for Linear","synthetic":true,"types":[]},{"text":"impl Freeze for ConstMean","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for GaussianProcess&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for SVM&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for NaiveBayes&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Gaussian","synthetic":true,"types":[]},{"text":"impl Freeze for Bernoulli","synthetic":true,"types":[]},{"text":"impl Freeze for Multinomial","synthetic":true,"types":[]},{"text":"impl Freeze for BruteForce","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for KNNClassifier&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for PCA","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for GradientDesc","synthetic":true,"types":[]},{"text":"impl Freeze for StochasticGD","synthetic":true,"types":[]},{"text":"impl Freeze for AdaGrad","synthetic":true,"types":[]},{"text":"impl Freeze for RMSProp","synthetic":true,"types":[]},{"text":"impl Freeze for ConjugateGD","synthetic":true,"types":[]},{"text":"impl Freeze for Sigmoid","synthetic":true,"types":[]},{"text":"impl Freeze for Linear","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for Tanh","synthetic":true,"types":[]},{"text":"impl Freeze for MeanSqError","synthetic":true,"types":[]},{"text":"impl Freeze for CrossEntropyError","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for KernelSum&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for KernelProd&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for KernelArith&lt;K&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Linear","synthetic":true,"types":[]},{"text":"impl Freeze for Polynomial","synthetic":true,"types":[]},{"text":"impl Freeze for SquaredExp","synthetic":true,"types":[]},{"text":"impl Freeze for Exponential","synthetic":true,"types":[]},{"text":"impl Freeze for HyperTan","synthetic":true,"types":[]},{"text":"impl Freeze for Multiquadric","synthetic":true,"types":[]},{"text":"impl Freeze for RationalQuadratic","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Regularization&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["ryu"] = [{"text":"impl Freeze for Buffer","synthetic":true,"types":[]}];
implementors["sct"] = [{"text":"impl&lt;'a&gt; Freeze for Log&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["serde"] = [{"text":"impl Freeze for IgnoredAny","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Unexpected&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UnitDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for BoolDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for IsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U8Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U16Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for UsizeDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for F64Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for CharDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for I128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U128Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for U32Deserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for StrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedStrDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; Freeze for StringDeserializer&lt;E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, E&gt; Freeze for CowStrDeserializer&lt;'a, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'de, E&gt; Freeze for BorrowedBytesDeserializer&lt;'de, E&gt;","synthetic":true,"types":[]},{"text":"impl&lt;I, E&gt; Freeze for SeqDeserializer&lt;I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SeqAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, I, E&gt; Freeze for MapDeserializer&lt;'de, I, E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;I as Iterator&gt;::Item as Pair&gt;::Second: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for MapAccessDeserializer&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Ok, Error&gt; Freeze for Impossible&lt;Ok, Error&gt;","synthetic":true,"types":[]}];
implementors["serde_json"] = [{"text":"impl&lt;R&gt; Freeze for Deserializer&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'de, R, T&gt; Freeze for StreamDeserializer&lt;'de, R, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;W, F&gt; Freeze for Serializer&lt;W, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Number","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SliceRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StrRead&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for IoRead&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Category","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ValuesMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CompactFormatter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrettyFormatter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for CharEscape","synthetic":true,"types":[]},{"text":"impl Freeze for Serializer","synthetic":true,"types":[]}];
implementors["sgx_alloc"] = [{"text":"impl Freeze for System","synthetic":true,"types":[]},{"text":"impl Freeze for AlignReq","synthetic":true,"types":[]},{"text":"impl Freeze for AlignAlloc","synthetic":true,"types":[]},{"text":"impl Freeze for AlighAllocErr","synthetic":true,"types":[]},{"text":"impl Freeze for AlignLayoutErr","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AlignBox&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for RsrvMemAlloc","synthetic":true,"types":[]},{"text":"impl Freeze for RsrvMemAllocErr","synthetic":true,"types":[]},{"text":"impl Freeze for ProtectAttr","synthetic":true,"types":[]}];
implementors["sgx_backtrace_sys"] = [{"text":"impl Freeze for backtrace_state","synthetic":true,"types":[]}];
implementors["sgx_demangle"] = [{"text":"impl&lt;'a&gt; Freeze for Demangle&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TryDemangleError","synthetic":true,"types":[]}];
implementors["sgx_libc"] = [{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl Freeze for stat64","synthetic":true,"types":[]},{"text":"impl Freeze for timeval","synthetic":true,"types":[]},{"text":"impl Freeze for timespec","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_in6","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_un","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_storage","synthetic":true,"types":[]},{"text":"impl Freeze for addrinfo","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_nl","synthetic":true,"types":[]},{"text":"impl Freeze for sockaddr_ll","synthetic":true,"types":[]},{"text":"impl Freeze for fd_set","synthetic":true,"types":[]},{"text":"impl Freeze for tm","synthetic":true,"types":[]},{"text":"impl Freeze for epoll_event","synthetic":true,"types":[]},{"text":"impl Freeze for in_addr","synthetic":true,"types":[]},{"text":"impl Freeze for in6_addr","synthetic":true,"types":[]},{"text":"impl Freeze for ip_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for ipv6_mreq","synthetic":true,"types":[]},{"text":"impl Freeze for hostent","synthetic":true,"types":[]},{"text":"impl Freeze for iovec","synthetic":true,"types":[]},{"text":"impl Freeze for pollfd","synthetic":true,"types":[]},{"text":"impl Freeze for winsize","synthetic":true,"types":[]},{"text":"impl Freeze for linger","synthetic":true,"types":[]},{"text":"impl Freeze for sigval","synthetic":true,"types":[]},{"text":"impl Freeze for msghdr","synthetic":true,"types":[]},{"text":"impl Freeze for cmsghdr","synthetic":true,"types":[]},{"text":"impl Freeze for dirent","synthetic":true,"types":[]},{"text":"impl Freeze for dirent64","synthetic":true,"types":[]},{"text":"impl Freeze for passwd","synthetic":true,"types":[]},{"text":"impl Freeze for cpu_set_t","synthetic":true,"types":[]},{"text":"impl Freeze for ucred","synthetic":true,"types":[]},{"text":"impl Freeze for pthread_once_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigset_t","synthetic":true,"types":[]},{"text":"impl Freeze for sigaction","synthetic":true,"types":[]},{"text":"impl Freeze for siginfo_t","synthetic":true,"types":[]},{"text":"impl Freeze for DIR","synthetic":true,"types":[]}];
implementors["sgx_rand"] = [{"text":"impl&lt;'a, T, R&gt; Freeze for Generator&lt;'a, T, R&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, R&gt; Freeze for AsciiGenerator&lt;'a, R&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for XorShiftRng","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Open01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;F&gt; Freeze for Closed01&lt;F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for StdRng","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadRng","synthetic":true,"types":[]},{"text":"impl&lt;Sup&gt; Freeze for RandSample&lt;Sup&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Weighted&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for WeightedChoice&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;X&gt; Freeze for Range&lt;X&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;X: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Gamma","synthetic":true,"types":[]},{"text":"impl Freeze for ChiSquared","synthetic":true,"types":[]},{"text":"impl Freeze for FisherF","synthetic":true,"types":[]},{"text":"impl Freeze for StudentT","synthetic":true,"types":[]},{"text":"impl Freeze for StandardNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Normal","synthetic":true,"types":[]},{"text":"impl Freeze for LogNormal","synthetic":true,"types":[]},{"text":"impl Freeze for Exp1","synthetic":true,"types":[]},{"text":"impl Freeze for Exp","synthetic":true,"types":[]},{"text":"impl Freeze for IsaacRng","synthetic":true,"types":[]},{"text":"impl Freeze for Isaac64Rng","synthetic":true,"types":[]},{"text":"impl Freeze for ChaChaRng","synthetic":true,"types":[]},{"text":"impl&lt;R, Rsdr&gt; Freeze for ReseedingRng&lt;R, Rsdr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;Rsdr: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ReseedWithDefault","synthetic":true,"types":[]},{"text":"impl Freeze for SgxRng","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for ReadRng&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["sgx_tcrypto"] = [{"text":"impl !Freeze for SgxShaHandle","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxSha1Handle","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxCmacHandle","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxHmacHandle","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxEccHandle","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxRsaPrivKey","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxRsaPubKey","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxAesHandle","synthetic":true,"types":[]}];
implementors["sgx_tprotected_fs"] = [{"text":"impl Freeze for SgxFileStream","synthetic":true,"types":[]},{"text":"impl Freeze for SeekFrom","synthetic":true,"types":[]}];
implementors["sgx_trts"] = [{"text":"impl Freeze for CString","synthetic":true,"types":[]},{"text":"impl Freeze for CStr","synthetic":true,"types":[]},{"text":"impl Freeze for NulError","synthetic":true,"types":[]},{"text":"impl Freeze for FromBytesWithNulError","synthetic":true,"types":[]},{"text":"impl Freeze for IntoStringError","synthetic":true,"types":[]},{"text":"impl Freeze for Feature","synthetic":true,"types":[]},{"text":"impl Freeze for global_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for thread_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for SgxGlobalData","synthetic":true,"types":[]},{"text":"impl Freeze for SgxThreadData","synthetic":true,"types":[]},{"text":"impl Freeze for SgxThreadPolicy","synthetic":true,"types":[]}];
implementors["sgx_tstd"] = [{"text":"impl&lt;T&gt; Freeze for LocalKey&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for AccessError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Key&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Key&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Key&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for ThreadId","synthetic":true,"types":[]},{"text":"impl Freeze for SgxThread","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for JoinHandle&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V, S&gt; Freeze for HashMap&lt;K, V, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T, S&gt; Freeze for HashSet&lt;T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Iter&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for IterMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoIter&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Keys&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Values&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Drain&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, F&gt; Freeze for DrainFilter&lt;'a, K, V, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for ValuesMut&lt;'a, K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoKeys&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for IntoValues&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilderMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawOccupiedEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawVacantEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryBuilder&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for OccupiedEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for VacantEntry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RandomState","synthetic":true,"types":[]},{"text":"impl Freeze for DefaultHasher","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V, S&gt; Freeze for RawEntryMut&lt;'a, K, V, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, V&gt; Freeze for Entry&lt;'a, K, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;K: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Iter&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;K&gt; Freeze for IntoIter&lt;K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K&gt; Freeze for Drain&lt;'a, K&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, K, F&gt; Freeze for DrainFilter&lt;'a, K, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;F: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Intersection&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Difference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for SymmetricDifference&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, S&gt; Freeze for Union&lt;'a, T, S&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Vars","synthetic":true,"types":[]},{"text":"impl Freeze for VarsOs","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SplitPaths&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for JoinPathsError","synthetic":true,"types":[]},{"text":"impl Freeze for VarError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Chain&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ErrorIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for OsString","synthetic":true,"types":[]},{"text":"impl Freeze for OsStr","synthetic":true,"types":[]},{"text":"impl Freeze for SgxFile","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for BufReader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for BufWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for LineWriter&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Cursor&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Lazy&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Stderr","synthetic":true,"types":[]},{"text":"impl Freeze for Stdin","synthetic":true,"types":[]},{"text":"impl Freeze for Stdout","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StderrLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StdinLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StdoutLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Empty","synthetic":true,"types":[]},{"text":"impl Freeze for Repeat","synthetic":true,"types":[]},{"text":"impl Freeze for Sink","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSliceMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IoSlice&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Initializer","synthetic":true,"types":[]},{"text":"impl&lt;T, U&gt; Freeze for Chain&lt;T, U&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;U: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for Take&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Bytes&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Split&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;B&gt; Freeze for Lines&lt;B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;B: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for SeekFrom","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv4Addr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6Addr","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddrV4","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddrV6","synthetic":true,"types":[]},{"text":"impl Freeze for TcpStream","synthetic":true,"types":[]},{"text":"impl Freeze for TcpListener","synthetic":true,"types":[]},{"text":"impl Freeze for UdpSocket","synthetic":true,"types":[]},{"text":"impl Freeze for AddrParseError","synthetic":true,"types":[]},{"text":"impl Freeze for IpAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Ipv6MulticastScope","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddr","synthetic":true,"types":[]},{"text":"impl Freeze for Shutdown","synthetic":true,"types":[]},{"text":"impl Freeze for SocketAddr","synthetic":true,"types":[]},{"text":"impl Freeze for UnixStream","synthetic":true,"types":[]},{"text":"impl Freeze for UnixListener","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Incoming&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for UnixDatagram","synthetic":true,"types":[]},{"text":"impl Freeze for stat","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for AssertUnwindSafe&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PrefixComponent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Components&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Ancestors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PathBuf","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for StripPrefixError","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Display&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Prefix&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Component&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for Barrier","synthetic":true,"types":[]},{"text":"impl Freeze for BarrierWaitResult","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxCondvar","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadCondvar","synthetic":true,"types":[]},{"text":"impl Freeze for WaitTimeoutResult","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SgxMutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SgxMutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadMutex","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SgxReentrantMutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for SgxReentrantMutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxReentrantThreadMutex","synthetic":true,"types":[]},{"text":"impl !Freeze for Once","synthetic":true,"types":[]},{"text":"impl Freeze for OnceState","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for SgxRwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SgxRwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for SgxRwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadRwLock","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxSpinlock","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SgxSpinlockGuard&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl !Freeze for SgxThreadSpinlock","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for PoisonError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TryLockError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Receiver&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for TryIter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Sender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SyncSender&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for SendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for RecvError","synthetic":true,"types":[]},{"text":"impl Freeze for TryRecvError","synthetic":true,"types":[]},{"text":"impl Freeze for RecvTimeoutError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TrySendError&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Instant","synthetic":true,"types":[]},{"text":"impl Freeze for SystemTime","synthetic":true,"types":[]},{"text":"impl Freeze for SystemTimeError","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Metadata","synthetic":true,"types":[]},{"text":"impl Freeze for ReadDir","synthetic":true,"types":[]},{"text":"impl Freeze for DirEntry","synthetic":true,"types":[]},{"text":"impl Freeze for OpenOptions","synthetic":true,"types":[]},{"text":"impl Freeze for Permissions","synthetic":true,"types":[]},{"text":"impl Freeze for FileType","synthetic":true,"types":[]},{"text":"impl Freeze for DirBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for PrintFormat","synthetic":true,"types":[]},{"text":"impl !Freeze for Backtrace","synthetic":true,"types":[]},{"text":"impl Freeze for BacktraceStatus","synthetic":true,"types":[]}];
implementors["sgx_types"] = [{"text":"impl Freeze for sgx_attributes_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_misc_attribute_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg1_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg2_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg3_body_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_msg3_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_session_enclave_identity_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_session_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ecc_param_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_cpu_svn_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_key_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_key_request_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_msg1_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_msg2_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ps_sec_prop_desc_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_msg3_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_spid_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_basename_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_nonce_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_update_info_bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_platform_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_att_key_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_att_key_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_att_key_id_ext_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_qe_report_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_measurement_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_report_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_target_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_report_body_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_report_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_dh_shared_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_private_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_public_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ec256_signature_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa3072_public_key_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa3072_key_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa3072_signature_t","synthetic":true,"types":[]},{"text":"impl Freeze for rsa_params_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_queue_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_mutex_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_rwlock_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_mutex_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_rwlockattr_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_cond_attr_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_thread_cond_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_cpu_context_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_exception_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_aes_gcm_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_sealed_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ps_cap_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_kss_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_worker_stats_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_pce_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qe3_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_pck_cert_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_config_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qve_collateral_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_ppid_rsa3072_encrypted_cert_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_auth_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_certification_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_ecdsa_sig_data_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_header_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote3_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qe_report_info_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qv_supplemental_t","synthetic":true,"types":[]},{"text":"impl Freeze for align_req_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_key_128bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_mac_128bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_key_256bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_mac_256bit_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_ec256_dh_shared_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_align_ec256_private_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_dh_session_role_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ra_key_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote_sign_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_generic_ecresult_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa_result_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_rsa_key_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_exception_vector_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_exception_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_device_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_worker_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_uswitchless_worker_event_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_request_policy_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_config_version_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_attestation_algorithm_id_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_cert_key_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_path_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for pck_cert_flag_enum_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_qv_path_type_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_status_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_pce_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_quote3_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_qcnl_error_t","synthetic":true,"types":[]},{"text":"impl Freeze for sgx_ql_qv_result_t","synthetic":true,"types":[]},{"text":"impl Freeze for tcs_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_header_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_key_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_body_t","synthetic":true,"types":[]},{"text":"impl Freeze for css_buffer_t","synthetic":true,"types":[]},{"text":"impl Freeze for enclave_css_t","synthetic":true,"types":[]},{"text":"impl Freeze for data_directory_t","synthetic":true,"types":[]},{"text":"impl Freeze for layout_entry_t","synthetic":true,"types":[]},{"text":"impl Freeze for layout_group_t","synthetic":true,"types":[]},{"text":"impl Freeze for patch_entry_t","synthetic":true,"types":[]},{"text":"impl Freeze for metadata_t","synthetic":true,"types":[]},{"text":"impl Freeze for layout_t","synthetic":true,"types":[]},{"text":"impl Freeze for dir_index_t","synthetic":true,"types":[]}];
implementors["sgx_unwind"] = [{"text":"impl Freeze for _Unwind_Exception","synthetic":true,"types":[]},{"text":"impl Freeze for _Unwind_Reason_Code","synthetic":true,"types":[]},{"text":"impl Freeze for _Unwind_Context","synthetic":true,"types":[]},{"text":"impl Freeze for _Unwind_Action","synthetic":true,"types":[]}];
implementors["simple_asn1"] = [{"text":"impl Freeze for OID","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1Class","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1Block","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1DecodeErr","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1EncodeErr","synthetic":true,"types":[]}];
implementors["smallvec"] = [{"text":"impl&lt;'a, T&gt; Freeze for Drain&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for SmallVec&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;A&gt; Freeze for IntoIter&lt;A&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;A: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for CollectionAllocErr","synthetic":true,"types":[]}];
implementors["snap"] = [{"text":"impl Freeze for Encoder","synthetic":true,"types":[]},{"text":"impl Freeze for Decoder","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for IntoInnerError&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Reader&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Writer&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["spin"] = [{"text":"impl&lt;T&gt; !Freeze for Mutex&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for MutexGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for RwLock&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockReadGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockWriteGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T:&nbsp;?Sized&gt; Freeze for RwLockUpgradeableGuard&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for Once&lt;T&gt;","synthetic":true,"types":[]}];
implementors["syn"] = [{"text":"impl Freeze for Attribute","synthetic":true,"types":[]},{"text":"impl Freeze for MetaList","synthetic":true,"types":[]},{"text":"impl Freeze for MetaNameValue","synthetic":true,"types":[]},{"text":"impl Freeze for Field","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsNamed","synthetic":true,"types":[]},{"text":"impl Freeze for FieldsUnnamed","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for VisCrate","synthetic":true,"types":[]},{"text":"impl Freeze for VisPublic","synthetic":true,"types":[]},{"text":"impl Freeze for VisRestricted","synthetic":true,"types":[]},{"text":"impl Freeze for Arm","synthetic":true,"types":[]},{"text":"impl Freeze for FieldValue","synthetic":true,"types":[]},{"text":"impl Freeze for Label","synthetic":true,"types":[]},{"text":"impl Freeze for MethodTurbofish","synthetic":true,"types":[]},{"text":"impl Freeze for ExprArray","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssign","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAssignOp","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAsync","synthetic":true,"types":[]},{"text":"impl Freeze for ExprAwait","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBinary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBox","synthetic":true,"types":[]},{"text":"impl Freeze for ExprBreak","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprCast","synthetic":true,"types":[]},{"text":"impl Freeze for ExprClosure","synthetic":true,"types":[]},{"text":"impl Freeze for ExprContinue","synthetic":true,"types":[]},{"text":"impl Freeze for ExprField","synthetic":true,"types":[]},{"text":"impl Freeze for ExprForLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprGroup","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIf","synthetic":true,"types":[]},{"text":"impl Freeze for ExprIndex","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLet","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLit","synthetic":true,"types":[]},{"text":"impl Freeze for ExprLoop","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMatch","synthetic":true,"types":[]},{"text":"impl Freeze for ExprMethodCall","synthetic":true,"types":[]},{"text":"impl Freeze for ExprParen","synthetic":true,"types":[]},{"text":"impl Freeze for ExprPath","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRange","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReference","synthetic":true,"types":[]},{"text":"impl Freeze for ExprRepeat","synthetic":true,"types":[]},{"text":"impl Freeze for ExprReturn","synthetic":true,"types":[]},{"text":"impl Freeze for ExprStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTry","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTryBlock","synthetic":true,"types":[]},{"text":"impl Freeze for ExprTuple","synthetic":true,"types":[]},{"text":"impl Freeze for ExprType","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnary","synthetic":true,"types":[]},{"text":"impl Freeze for ExprUnsafe","synthetic":true,"types":[]},{"text":"impl Freeze for ExprWhile","synthetic":true,"types":[]},{"text":"impl Freeze for ExprYield","synthetic":true,"types":[]},{"text":"impl Freeze for Index","synthetic":true,"types":[]},{"text":"impl Freeze for BoundLifetimes","synthetic":true,"types":[]},{"text":"impl Freeze for ConstParam","synthetic":true,"types":[]},{"text":"impl Freeze for Generics","synthetic":true,"types":[]},{"text":"impl Freeze for LifetimeDef","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateEq","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateLifetime","synthetic":true,"types":[]},{"text":"impl Freeze for PredicateType","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBound","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParam","synthetic":true,"types":[]},{"text":"impl Freeze for WhereClause","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ImplGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Turbofish&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TypeGenerics&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for ItemEnum","synthetic":true,"types":[]},{"text":"impl Freeze for ItemExternCrate","synthetic":true,"types":[]},{"text":"impl Freeze for ItemFn","synthetic":true,"types":[]},{"text":"impl Freeze for ItemForeignMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemImpl","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMacro2","synthetic":true,"types":[]},{"text":"impl Freeze for ItemMod","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStatic","synthetic":true,"types":[]},{"text":"impl Freeze for ItemStruct","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTrait","synthetic":true,"types":[]},{"text":"impl Freeze for ItemTraitAlias","synthetic":true,"types":[]},{"text":"impl Freeze for ItemType","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUnion","synthetic":true,"types":[]},{"text":"impl Freeze for ItemUse","synthetic":true,"types":[]},{"text":"impl Freeze for Receiver","synthetic":true,"types":[]},{"text":"impl Freeze for Signature","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemConst","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemMethod","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItemType","synthetic":true,"types":[]},{"text":"impl Freeze for UseGlob","synthetic":true,"types":[]},{"text":"impl Freeze for UseGroup","synthetic":true,"types":[]},{"text":"impl Freeze for UseName","synthetic":true,"types":[]},{"text":"impl Freeze for UsePath","synthetic":true,"types":[]},{"text":"impl Freeze for UseRename","synthetic":true,"types":[]},{"text":"impl Freeze for File","synthetic":true,"types":[]},{"text":"impl Freeze for Lifetime","synthetic":true,"types":[]},{"text":"impl Freeze for LitBool","synthetic":true,"types":[]},{"text":"impl Freeze for LitByte","synthetic":true,"types":[]},{"text":"impl Freeze for LitByteStr","synthetic":true,"types":[]},{"text":"impl Freeze for LitChar","synthetic":true,"types":[]},{"text":"impl Freeze for LitFloat","synthetic":true,"types":[]},{"text":"impl Freeze for LitInt","synthetic":true,"types":[]},{"text":"impl Freeze for LitStr","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for DataEnum","synthetic":true,"types":[]},{"text":"impl Freeze for DataStruct","synthetic":true,"types":[]},{"text":"impl Freeze for DataUnion","synthetic":true,"types":[]},{"text":"impl Freeze for DeriveInput","synthetic":true,"types":[]},{"text":"impl Freeze for Block","synthetic":true,"types":[]},{"text":"impl Freeze for Local","synthetic":true,"types":[]},{"text":"impl Freeze for Abi","synthetic":true,"types":[]},{"text":"impl Freeze for BareFnArg","synthetic":true,"types":[]},{"text":"impl Freeze for TypeArray","synthetic":true,"types":[]},{"text":"impl Freeze for TypeBareFn","synthetic":true,"types":[]},{"text":"impl Freeze for TypeGroup","synthetic":true,"types":[]},{"text":"impl Freeze for TypeImplTrait","synthetic":true,"types":[]},{"text":"impl Freeze for TypeInfer","synthetic":true,"types":[]},{"text":"impl Freeze for TypeMacro","synthetic":true,"types":[]},{"text":"impl Freeze for TypeNever","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParen","synthetic":true,"types":[]},{"text":"impl Freeze for TypePath","synthetic":true,"types":[]},{"text":"impl Freeze for TypePtr","synthetic":true,"types":[]},{"text":"impl Freeze for TypeReference","synthetic":true,"types":[]},{"text":"impl Freeze for TypeSlice","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTraitObject","synthetic":true,"types":[]},{"text":"impl Freeze for TypeTuple","synthetic":true,"types":[]},{"text":"impl Freeze for Variadic","synthetic":true,"types":[]},{"text":"impl Freeze for FieldPat","synthetic":true,"types":[]},{"text":"impl Freeze for PatBox","synthetic":true,"types":[]},{"text":"impl Freeze for PatIdent","synthetic":true,"types":[]},{"text":"impl Freeze for PatLit","synthetic":true,"types":[]},{"text":"impl Freeze for PatMacro","synthetic":true,"types":[]},{"text":"impl Freeze for PatOr","synthetic":true,"types":[]},{"text":"impl Freeze for PatPath","synthetic":true,"types":[]},{"text":"impl Freeze for PatRange","synthetic":true,"types":[]},{"text":"impl Freeze for PatReference","synthetic":true,"types":[]},{"text":"impl Freeze for PatRest","synthetic":true,"types":[]},{"text":"impl Freeze for PatSlice","synthetic":true,"types":[]},{"text":"impl Freeze for PatStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatTuple","synthetic":true,"types":[]},{"text":"impl Freeze for PatTupleStruct","synthetic":true,"types":[]},{"text":"impl Freeze for PatType","synthetic":true,"types":[]},{"text":"impl Freeze for PatWild","synthetic":true,"types":[]},{"text":"impl Freeze for AngleBracketedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Binding","synthetic":true,"types":[]},{"text":"impl Freeze for Constraint","synthetic":true,"types":[]},{"text":"impl Freeze for ParenthesizedGenericArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Path","synthetic":true,"types":[]},{"text":"impl Freeze for PathSegment","synthetic":true,"types":[]},{"text":"impl Freeze for QSelf","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for AttrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for Meta","synthetic":true,"types":[]},{"text":"impl Freeze for NestedMeta","synthetic":true,"types":[]},{"text":"impl Freeze for Fields","synthetic":true,"types":[]},{"text":"impl Freeze for Visibility","synthetic":true,"types":[]},{"text":"impl Freeze for GenericMethodArgument","synthetic":true,"types":[]},{"text":"impl Freeze for RangeLimits","synthetic":true,"types":[]},{"text":"impl Freeze for Expr","synthetic":true,"types":[]},{"text":"impl Freeze for Member","synthetic":true,"types":[]},{"text":"impl Freeze for GenericParam","synthetic":true,"types":[]},{"text":"impl Freeze for TraitBoundModifier","synthetic":true,"types":[]},{"text":"impl Freeze for TypeParamBound","synthetic":true,"types":[]},{"text":"impl Freeze for WherePredicate","synthetic":true,"types":[]},{"text":"impl Freeze for FnArg","synthetic":true,"types":[]},{"text":"impl Freeze for ForeignItem","synthetic":true,"types":[]},{"text":"impl Freeze for ImplItem","synthetic":true,"types":[]},{"text":"impl Freeze for Item","synthetic":true,"types":[]},{"text":"impl Freeze for TraitItem","synthetic":true,"types":[]},{"text":"impl Freeze for UseTree","synthetic":true,"types":[]},{"text":"impl Freeze for Lit","synthetic":true,"types":[]},{"text":"impl Freeze for StrStyle","synthetic":true,"types":[]},{"text":"impl Freeze for MacroDelimiter","synthetic":true,"types":[]},{"text":"impl Freeze for Data","synthetic":true,"types":[]},{"text":"impl Freeze for BinOp","synthetic":true,"types":[]},{"text":"impl Freeze for UnOp","synthetic":true,"types":[]},{"text":"impl Freeze for Stmt","synthetic":true,"types":[]},{"text":"impl Freeze for ReturnType","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Pat","synthetic":true,"types":[]},{"text":"impl Freeze for GenericArgument","synthetic":true,"types":[]},{"text":"impl Freeze for PathArguments","synthetic":true,"types":[]},{"text":"impl Freeze for Underscore","synthetic":true,"types":[]},{"text":"impl Freeze for Abstract","synthetic":true,"types":[]},{"text":"impl Freeze for As","synthetic":true,"types":[]},{"text":"impl Freeze for Async","synthetic":true,"types":[]},{"text":"impl Freeze for Auto","synthetic":true,"types":[]},{"text":"impl Freeze for Await","synthetic":true,"types":[]},{"text":"impl Freeze for Become","synthetic":true,"types":[]},{"text":"impl Freeze for Box","synthetic":true,"types":[]},{"text":"impl Freeze for Break","synthetic":true,"types":[]},{"text":"impl Freeze for Const","synthetic":true,"types":[]},{"text":"impl Freeze for Continue","synthetic":true,"types":[]},{"text":"impl Freeze for Crate","synthetic":true,"types":[]},{"text":"impl Freeze for Default","synthetic":true,"types":[]},{"text":"impl Freeze for Do","synthetic":true,"types":[]},{"text":"impl Freeze for Dyn","synthetic":true,"types":[]},{"text":"impl Freeze for Else","synthetic":true,"types":[]},{"text":"impl Freeze for Enum","synthetic":true,"types":[]},{"text":"impl Freeze for Extern","synthetic":true,"types":[]},{"text":"impl Freeze for Final","synthetic":true,"types":[]},{"text":"impl Freeze for Fn","synthetic":true,"types":[]},{"text":"impl Freeze for For","synthetic":true,"types":[]},{"text":"impl Freeze for If","synthetic":true,"types":[]},{"text":"impl Freeze for Impl","synthetic":true,"types":[]},{"text":"impl Freeze for In","synthetic":true,"types":[]},{"text":"impl Freeze for Let","synthetic":true,"types":[]},{"text":"impl Freeze for Loop","synthetic":true,"types":[]},{"text":"impl Freeze for Macro","synthetic":true,"types":[]},{"text":"impl Freeze for Match","synthetic":true,"types":[]},{"text":"impl Freeze for Mod","synthetic":true,"types":[]},{"text":"impl Freeze for Move","synthetic":true,"types":[]},{"text":"impl Freeze for Mut","synthetic":true,"types":[]},{"text":"impl Freeze for Override","synthetic":true,"types":[]},{"text":"impl Freeze for Priv","synthetic":true,"types":[]},{"text":"impl Freeze for Pub","synthetic":true,"types":[]},{"text":"impl Freeze for Ref","synthetic":true,"types":[]},{"text":"impl Freeze for Return","synthetic":true,"types":[]},{"text":"impl Freeze for SelfType","synthetic":true,"types":[]},{"text":"impl Freeze for SelfValue","synthetic":true,"types":[]},{"text":"impl Freeze for Static","synthetic":true,"types":[]},{"text":"impl Freeze for Struct","synthetic":true,"types":[]},{"text":"impl Freeze for Super","synthetic":true,"types":[]},{"text":"impl Freeze for Trait","synthetic":true,"types":[]},{"text":"impl Freeze for Try","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Typeof","synthetic":true,"types":[]},{"text":"impl Freeze for Union","synthetic":true,"types":[]},{"text":"impl Freeze for Unsafe","synthetic":true,"types":[]},{"text":"impl Freeze for Unsized","synthetic":true,"types":[]},{"text":"impl Freeze for Use","synthetic":true,"types":[]},{"text":"impl Freeze for Virtual","synthetic":true,"types":[]},{"text":"impl Freeze for Where","synthetic":true,"types":[]},{"text":"impl Freeze for While","synthetic":true,"types":[]},{"text":"impl Freeze for Yield","synthetic":true,"types":[]},{"text":"impl Freeze for Add","synthetic":true,"types":[]},{"text":"impl Freeze for AddEq","synthetic":true,"types":[]},{"text":"impl Freeze for And","synthetic":true,"types":[]},{"text":"impl Freeze for AndAnd","synthetic":true,"types":[]},{"text":"impl Freeze for AndEq","synthetic":true,"types":[]},{"text":"impl Freeze for At","synthetic":true,"types":[]},{"text":"impl Freeze for Bang","synthetic":true,"types":[]},{"text":"impl Freeze for Caret","synthetic":true,"types":[]},{"text":"impl Freeze for CaretEq","synthetic":true,"types":[]},{"text":"impl Freeze for Colon","synthetic":true,"types":[]},{"text":"impl Freeze for Colon2","synthetic":true,"types":[]},{"text":"impl Freeze for Comma","synthetic":true,"types":[]},{"text":"impl Freeze for Div","synthetic":true,"types":[]},{"text":"impl Freeze for DivEq","synthetic":true,"types":[]},{"text":"impl Freeze for Dollar","synthetic":true,"types":[]},{"text":"impl Freeze for Dot","synthetic":true,"types":[]},{"text":"impl Freeze for Dot2","synthetic":true,"types":[]},{"text":"impl Freeze for Dot3","synthetic":true,"types":[]},{"text":"impl Freeze for DotDotEq","synthetic":true,"types":[]},{"text":"impl Freeze for Eq","synthetic":true,"types":[]},{"text":"impl Freeze for EqEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ge","synthetic":true,"types":[]},{"text":"impl Freeze for Gt","synthetic":true,"types":[]},{"text":"impl Freeze for Le","synthetic":true,"types":[]},{"text":"impl Freeze for Lt","synthetic":true,"types":[]},{"text":"impl Freeze for MulEq","synthetic":true,"types":[]},{"text":"impl Freeze for Ne","synthetic":true,"types":[]},{"text":"impl Freeze for Or","synthetic":true,"types":[]},{"text":"impl Freeze for OrEq","synthetic":true,"types":[]},{"text":"impl Freeze for OrOr","synthetic":true,"types":[]},{"text":"impl Freeze for Pound","synthetic":true,"types":[]},{"text":"impl Freeze for Question","synthetic":true,"types":[]},{"text":"impl Freeze for RArrow","synthetic":true,"types":[]},{"text":"impl Freeze for LArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Rem","synthetic":true,"types":[]},{"text":"impl Freeze for RemEq","synthetic":true,"types":[]},{"text":"impl Freeze for FatArrow","synthetic":true,"types":[]},{"text":"impl Freeze for Semi","synthetic":true,"types":[]},{"text":"impl Freeze for Shl","synthetic":true,"types":[]},{"text":"impl Freeze for ShlEq","synthetic":true,"types":[]},{"text":"impl Freeze for Shr","synthetic":true,"types":[]},{"text":"impl Freeze for ShrEq","synthetic":true,"types":[]},{"text":"impl Freeze for Star","synthetic":true,"types":[]},{"text":"impl Freeze for Sub","synthetic":true,"types":[]},{"text":"impl Freeze for SubEq","synthetic":true,"types":[]},{"text":"impl Freeze for Tilde","synthetic":true,"types":[]},{"text":"impl Freeze for Brace","synthetic":true,"types":[]},{"text":"impl Freeze for Bracket","synthetic":true,"types":[]},{"text":"impl Freeze for Paren","synthetic":true,"types":[]},{"text":"impl Freeze for Group","synthetic":true,"types":[]},{"text":"impl Freeze for TokenBuffer","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Cursor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Punctuated&lt;T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for Pairs&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T, P&gt; Freeze for PairsMut&lt;'a, T, P&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for IntoPairs&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Iter&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T, P&gt; Freeze for Pair&lt;T, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: Freeze,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for Lookahead1&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; !Freeze for ParseBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'a&gt; Freeze for StepCursor&lt;'c, 'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Nothing","synthetic":true,"types":[]}];
implementors["teaclave_attestation"] = [{"text":"impl Freeze for AttestationServiceConfig","synthetic":true,"types":[]},{"text":"impl Freeze for DcapConfig","synthetic":true,"types":[]},{"text":"impl Freeze for EndorsedAttestationReport","synthetic":true,"types":[]},{"text":"impl Freeze for AttestedTlsConfig","synthetic":true,"types":[]},{"text":"impl Freeze for RemoteAttestation","synthetic":true,"types":[]},{"text":"impl Freeze for AttestationError","synthetic":true,"types":[]},{"text":"impl Freeze for AttestationConfig","synthetic":true,"types":[]},{"text":"impl Freeze for SgxEnclaveReport","synthetic":true,"types":[]},{"text":"impl Freeze for SgxQuote","synthetic":true,"types":[]},{"text":"impl Freeze for AttestationReport","synthetic":true,"types":[]},{"text":"impl Freeze for SgxQuoteVersion","synthetic":true,"types":[]},{"text":"impl Freeze for SgxEpidQuoteSigType","synthetic":true,"types":[]},{"text":"impl Freeze for SgxEcdsaQuoteAkType","synthetic":true,"types":[]},{"text":"impl Freeze for SgxQuoteStatus","synthetic":true,"types":[]},{"text":"impl Freeze for AttestationReportVerifier","synthetic":true,"types":[]},{"text":"impl Freeze for NistP256KeyPair","synthetic":true,"types":[]}];
implementors["teaclave_binder"] = [{"text":"impl Freeze for ECallReceiver","synthetic":true,"types":[]},{"text":"impl Freeze for StartServiceInput","synthetic":true,"types":[]},{"text":"impl Freeze for StartServiceOutput","synthetic":true,"types":[]},{"text":"impl Freeze for InitEnclaveInput","synthetic":true,"types":[]},{"text":"impl Freeze for InitEnclaveOutput","synthetic":true,"types":[]},{"text":"impl Freeze for FinalizeEnclaveInput","synthetic":true,"types":[]},{"text":"impl Freeze for FinalizeEnclaveOutput","synthetic":true,"types":[]},{"text":"impl Freeze for RunTestInput","synthetic":true,"types":[]},{"text":"impl Freeze for RunTestOutput","synthetic":true,"types":[]},{"text":"impl Freeze for RawJsonInput","synthetic":true,"types":[]},{"text":"impl Freeze for RawJsonOutput","synthetic":true,"types":[]},{"text":"impl Freeze for ECallCommand","synthetic":true,"types":[]}];
implementors["teaclave_config"] = [{"text":"impl Freeze for RuntimeConfig","synthetic":true,"types":[]},{"text":"impl Freeze for BuildConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Inbounds","synthetic":true,"types":[]}];
implementors["teaclave_crypto"] = [{"text":"impl Freeze for AesGcm256Key","synthetic":true,"types":[]},{"text":"impl Freeze for AesGcm128Key","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveFile128Key","synthetic":true,"types":[]}];
implementors["teaclave_executor"] = [{"text":"impl Freeze for BuiltinFunctionExecutor","synthetic":true,"types":[]},{"text":"impl Freeze for MesaPy","synthetic":true,"types":[]},{"text":"impl Freeze for WAMicroRuntime","synthetic":true,"types":[]}];
implementors["teaclave_function"] = [{"text":"impl Freeze for Echo","synthetic":true,"types":[]},{"text":"impl Freeze for FaceDetection","synthetic":true,"types":[]},{"text":"impl Freeze for GbdtPredict","synthetic":true,"types":[]},{"text":"impl Freeze for GbdtTrain","synthetic":true,"types":[]},{"text":"impl Freeze for LogisticRegressionPredict","synthetic":true,"types":[]},{"text":"impl Freeze for LogisticRegressionTrain","synthetic":true,"types":[]},{"text":"impl Freeze for OnlineDecrypt","synthetic":true,"types":[]},{"text":"impl Freeze for OrderedSetIntersect","synthetic":true,"types":[]},{"text":"impl Freeze for PasswordCheck","synthetic":true,"types":[]},{"text":"impl Freeze for PrincipalComponentsAnalysis","synthetic":true,"types":[]},{"text":"impl Freeze for PrivateJoinAndCompute","synthetic":true,"types":[]},{"text":"impl Freeze for RsaSign","synthetic":true,"types":[]}];
implementors["teaclave_proto"] = [{"text":"impl Freeze for AuthorizeDataRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeDataResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeFunctionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeFunctionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeStagedTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeStagedTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserRegisterRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserRegisterResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserLoginRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserLoginResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserAuthenticateRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserAuthenticateResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserCredential","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateInputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateInputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterOutputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateOutputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterOutputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateOutputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFusionOutputRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFusionOutputResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFromOutputRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFromOutputResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetInputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetInputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetOutputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetOutputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFunctionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFunctionRequestBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFunctionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetFunctionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetFunctionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for CreateTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AssignDataRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AssignDataResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ApproveTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ApproveTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for InvokeTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for InvokeTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SubscribeRequest","synthetic":true,"types":[]},{"text":"impl Freeze for SubscribeResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PullTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PullTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskResultRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskResultResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskStatusResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PublishTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PublishTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PutRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Freeze for EnqueueRequest","synthetic":true,"types":[]},{"text":"impl Freeze for EnqueueResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DequeueRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DequeueResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserRegisterRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserRegisterResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserLoginRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserLoginResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserAuthenticateRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UserAuthenticateResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAuthenticationApiClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAuthenticationInternalClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAuthenticationApiRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAuthenticationApiResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAuthenticationInternalRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAuthenticationInternalResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UserCredential","synthetic":true,"types":[]},{"text":"impl Freeze for FileCryptoInfo","synthetic":true,"types":[]},{"text":"impl Freeze for TaskOutputs","synthetic":true,"types":[]},{"text":"impl Freeze for TaskFailure","synthetic":true,"types":[]},{"text":"impl Freeze for TaskResult","synthetic":true,"types":[]},{"text":"impl Freeze for TaskStatus","synthetic":true,"types":[]},{"text":"impl Freeze for Result","synthetic":true,"types":[]},{"text":"impl Freeze for GetRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PutRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PutResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DeleteResponse","synthetic":true,"types":[]},{"text":"impl Freeze for EnqueueRequest","synthetic":true,"types":[]},{"text":"impl Freeze for EnqueueResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DequeueRequest","synthetic":true,"types":[]},{"text":"impl Freeze for DequeueResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveStorageClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveStorageRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveStorageResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateInputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateInputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterOutputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterOutputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateOutputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateOutputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFusionOutputRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFusionOutputResponse","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFromOutputRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterInputFromOutputResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetOutputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetOutputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetInputFileRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetInputFileResponse","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionInput","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for OwnerList","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFunctionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for RegisterFunctionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetFunctionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetFunctionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for DataMap","synthetic":true,"types":[]},{"text":"impl Freeze for CreateTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for CreateTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for GetTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for GetTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AssignDataRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AssignDataResponse","synthetic":true,"types":[]},{"text":"impl Freeze for ApproveTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for ApproveTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for InvokeTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for InvokeTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveFrontendClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveFrontendRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveFrontendResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveManagementClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveManagementRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveManagementResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeDataRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeDataResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeFunctionRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeFunctionResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeStagedTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for AuthorizeStagedTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAccessControlClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAccessControlRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveAccessControlResponse","synthetic":true,"types":[]},{"text":"impl Freeze for SubscribeRequest","synthetic":true,"types":[]},{"text":"impl Freeze for SubscribeResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PullTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PullTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskStatusRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskStatusResponse","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskResultRequest","synthetic":true,"types":[]},{"text":"impl Freeze for UpdateTaskResultResponse","synthetic":true,"types":[]},{"text":"impl Freeze for PublishTaskRequest","synthetic":true,"types":[]},{"text":"impl Freeze for PublishTaskResponse","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveSchedulerClient","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveSchedulerRequest","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveSchedulerResponse","synthetic":true,"types":[]}];
implementors["teaclave_rpc"] = [{"text":"impl&lt;T&gt; Freeze for Request&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;U, V&gt; Freeze for SgxTrustedTlsChannel&lt;U, V&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for SgxTrustedTlsServerConfig","synthetic":true,"types":[]},{"text":"impl Freeze for SgxTrustedTlsClientConfig","synthetic":true,"types":[]},{"text":"impl Freeze for Endpoint","synthetic":true,"types":[]},{"text":"impl&lt;U, V&gt; Freeze for SgxTrustedTlsServer&lt;U, V&gt;","synthetic":true,"types":[]}];
implementors["teaclave_runtime"] = [{"text":"impl Freeze for DefaultRuntime","synthetic":true,"types":[]}];
implementors["teaclave_service_enclave_utils"] = [{"text":"impl Freeze for ServiceEnclave","synthetic":true,"types":[]}];
implementors["teaclave_test_utils"] = [{"text":"impl Freeze for TestCase","synthetic":true,"types":[]}];
implementors["teaclave_types"] = [{"text":"impl Freeze for EnclaveMeasurement","synthetic":true,"types":[]},{"text":"impl Freeze for EnclaveAttr","synthetic":true,"types":[]},{"text":"impl Freeze for EnclaveInfo","synthetic":true,"types":[]},{"text":"impl Freeze for FileAuthTag","synthetic":true,"types":[]},{"text":"impl Freeze for ECallStatus","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveInputFile","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveOutputFile","synthetic":true,"types":[]},{"text":"impl Freeze for FileAgentRequest","synthetic":true,"types":[]},{"text":"impl Freeze for HandleFileInfo","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionInput","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionOutput","synthetic":true,"types":[]},{"text":"impl Freeze for Function","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for StagedFileInfo","synthetic":true,"types":[]},{"text":"impl Freeze for StagedFiles","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionArguments","synthetic":true,"types":[]},{"text":"impl Freeze for StagedFunction","synthetic":true,"types":[]},{"text":"impl Freeze for StagedFunctionBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionInputFiles","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionOutputFiles","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionInputFile","synthetic":true,"types":[]},{"text":"impl Freeze for FunctionOutputFile","synthetic":true,"types":[]},{"text":"impl Freeze for StagedTask","synthetic":true,"types":[]},{"text":"impl Freeze for StagedTaskBuilder","synthetic":true,"types":[]},{"text":"impl Freeze for UserID","synthetic":true,"types":[]},{"text":"impl Freeze for OwnerList","synthetic":true,"types":[]},{"text":"impl Freeze for OutputsTags","synthetic":true,"types":[]},{"text":"impl Freeze for TaskOutputs","synthetic":true,"types":[]},{"text":"impl Freeze for TaskFailure","synthetic":true,"types":[]},{"text":"impl Freeze for ExternalID","synthetic":true,"types":[]},{"text":"impl Freeze for TaskFileOwners","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; Freeze for TaskFiles&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for TaskState","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Task&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Create","synthetic":true,"types":[]},{"text":"impl Freeze for Assign","synthetic":true,"types":[]},{"text":"impl Freeze for Approve","synthetic":true,"types":[]},{"text":"impl Freeze for Stage","synthetic":true,"types":[]},{"text":"impl Freeze for Run","synthetic":true,"types":[]},{"text":"impl Freeze for Finish","synthetic":true,"types":[]},{"text":"impl Freeze for Done","synthetic":true,"types":[]},{"text":"impl Freeze for WorkerCapability","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutionResult","synthetic":true,"types":[]},{"text":"impl Freeze for FileCrypto","synthetic":true,"types":[]},{"text":"impl Freeze for TeeServiceError","synthetic":true,"types":[]},{"text":"impl Freeze for TeaclaveServiceResponseError","synthetic":true,"types":[]},{"text":"impl Freeze for HandleFileCommand","synthetic":true,"types":[]},{"text":"impl Freeze for TaskStatus","synthetic":true,"types":[]},{"text":"impl Freeze for TaskResult","synthetic":true,"types":[]},{"text":"impl Freeze for ExecutorType","synthetic":true,"types":[]},{"text":"impl Freeze for Executor","synthetic":true,"types":[]}];
implementors["teaclave_worker"] = [{"text":"impl Freeze for Worker","synthetic":true,"types":[]}];
implementors["termcolor"] = [{"text":"impl Freeze for StandardStream","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for StandardStreamLock&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BufferedStandardStream","synthetic":true,"types":[]},{"text":"impl !Freeze for BufferWriter","synthetic":true,"types":[]},{"text":"impl Freeze for Buffer","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for NoColor&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for Ansi&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for ColorSpec","synthetic":true,"types":[]},{"text":"impl Freeze for ParseColorError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorChoice","synthetic":true,"types":[]},{"text":"impl Freeze for Color","synthetic":true,"types":[]},{"text":"impl Freeze for ParseColorErrorKind","synthetic":true,"types":[]}];
implementors["thread_local"] = [{"text":"impl&lt;T&gt; !Freeze for CachedIntoIter&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for CachedIterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for CachedThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for ThreadLocal&lt;T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for IterMut&lt;'a, T&gt;","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; !Freeze for IntoIter&lt;T&gt;","synthetic":true,"types":[]}];
implementors["threadpool"] = [{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl !Freeze for ThreadPoolSharedData","synthetic":true,"types":[]},{"text":"impl !Freeze for ThreadPool","synthetic":true,"types":[]}];
implementors["tiff"] = [{"text":"impl Freeze for InflateError","synthetic":true,"types":[]},{"text":"impl Freeze for TiffError","synthetic":true,"types":[]},{"text":"impl Freeze for TiffFormatError","synthetic":true,"types":[]},{"text":"impl Freeze for TiffUnsupportedError","synthetic":true,"types":[]},{"text":"impl Freeze for ColorType","synthetic":true,"types":[]},{"text":"impl Freeze for Limits","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; Freeze for Decoder&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for DecodingResult","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DecodingBuffer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for PhotometricInterpretation","synthetic":true,"types":[]},{"text":"impl Freeze for CompressionMethod","synthetic":true,"types":[]},{"text":"impl Freeze for PlanarConfiguration","synthetic":true,"types":[]},{"text":"impl Freeze for Predictor","synthetic":true,"types":[]},{"text":"impl Freeze for Entry","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for Type","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl Freeze for Rational","synthetic":true,"types":[]},{"text":"impl Freeze for SRational","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; Freeze for TiffEncoder&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, W&gt; Freeze for DirectoryEncoder&lt;'a, W&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, W, C&gt; Freeze for ImageEncoder&lt;'a, W, C&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ResolutionUnit","synthetic":true,"types":[]},{"text":"impl Freeze for Gray8","synthetic":true,"types":[]},{"text":"impl Freeze for Gray16","synthetic":true,"types":[]},{"text":"impl Freeze for RGB8","synthetic":true,"types":[]},{"text":"impl Freeze for RGB16","synthetic":true,"types":[]},{"text":"impl Freeze for RGBA8","synthetic":true,"types":[]},{"text":"impl Freeze for RGBA16","synthetic":true,"types":[]},{"text":"impl Freeze for CMYK8","synthetic":true,"types":[]}];
implementors["toml"] = [{"text":"impl&lt;T&gt; Freeze for Spanned&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;K, V&gt; Freeze for Map&lt;K, V&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for VacantEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for OccupiedEntry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Iter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for IterMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for IntoIter","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Keys&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Values&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Entry&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Datetime","synthetic":true,"types":[]},{"text":"impl Freeze for DatetimeParseError","synthetic":true,"types":[]},{"text":"impl Freeze for Value","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Serializer&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Deserializer&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["unicode_bidi"] = [{"text":"impl Freeze for IsolatingRunSequence","synthetic":true,"types":[]},{"text":"impl Freeze for ParagraphInfo","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for InitialInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'text&gt; Freeze for BidiInfo&lt;'text&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for BidiClass","synthetic":true,"types":[]},{"text":"impl Freeze for Level","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["unicode_normalization"] = [{"text":"impl&lt;I&gt; Freeze for Decompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for Recompositions&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;I&gt; Freeze for StreamSafe&lt;I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for IsNormalized","synthetic":true,"types":[]}];
implementors["untrusted"] = [{"text":"impl&lt;'a&gt; Freeze for Input&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Reader&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Mark","synthetic":true,"types":[]},{"text":"impl Freeze for EndOfInput","synthetic":true,"types":[]}];
implementors["url"] = [{"text":"impl Freeze for OpaqueOrigin","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for PathSegmentsMut&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Url","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseOptions&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UrlQuery&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Freeze for Host&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Freeze,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Freeze for Origin","synthetic":true,"types":[]},{"text":"impl Freeze for ParseError","synthetic":true,"types":[]},{"text":"impl Freeze for SyntaxViolation","synthetic":true,"types":[]},{"text":"impl Freeze for Position","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for Parse&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ParseIntoOwned&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for ByteSerialize&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; Freeze for Serializer&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Freeze,&nbsp;</span>","synthetic":true,"types":[]}];
implementors["uuid"] = [{"text":"impl Freeze for Uuid","synthetic":true,"types":[]},{"text":"impl Freeze for Version","synthetic":true,"types":[]},{"text":"impl Freeze for Variant","synthetic":true,"types":[]},{"text":"impl Freeze for Builder","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]},{"text":"impl Freeze for Hyphenated","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for HyphenatedRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Simple","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for SimpleRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Urn","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for UrnRef&lt;'a&gt;","synthetic":true,"types":[]}];
implementors["webpki"] = [{"text":"impl&lt;'a&gt; Freeze for DNSNameRef&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for InvalidDNSNameError","synthetic":true,"types":[]},{"text":"impl Freeze for DNSName","synthetic":true,"types":[]},{"text":"impl Freeze for SignatureAlgorithm","synthetic":true,"types":[]},{"text":"impl Freeze for Time","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for EndEntityCert&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TrustAnchor&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TLSServerTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for TLSClientTrustAnchors&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for Error","synthetic":true,"types":[]}];
implementors["yasna"] = [{"text":"impl&lt;'a&gt; Freeze for DERWriter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DERWriterSeq&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; Freeze for DERWriterSet&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BERReader&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BERReaderSeq&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'a, 'b&gt; Freeze for BERReaderSet&lt;'a, 'b&gt;","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1Error","synthetic":true,"types":[]},{"text":"impl Freeze for Tag","synthetic":true,"types":[]},{"text":"impl Freeze for BERMode","synthetic":true,"types":[]},{"text":"impl Freeze for ASN1ErrorKind","synthetic":true,"types":[]},{"text":"impl Freeze for PCBit","synthetic":true,"types":[]},{"text":"impl Freeze for TagClass","synthetic":true,"types":[]},{"text":"impl Freeze for ObjectIdentifier","synthetic":true,"types":[]},{"text":"impl Freeze for ParseOidError","synthetic":true,"types":[]},{"text":"impl Freeze for UTCTime","synthetic":true,"types":[]},{"text":"impl Freeze for GeneralizedTime","synthetic":true,"types":[]},{"text":"impl Freeze for TaggedDerValue","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()