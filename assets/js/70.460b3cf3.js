(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{566:function(e,t,a){"use strict";a.r(t);var n=a(29),s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"protected-code-launch-sample"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#protected-code-launch-sample"}},[e._v("#")]),e._v(" Protected Code Launch Sample")]),e._v(" "),a("p",[e._v("This code sample shows how to use PCL in Rust-SGX.")]),e._v(" "),a("p",[a("code",[e._v("pcl-user")]),e._v(" contains logic of the user side, who wants to load encrypted enclave on a remote SGX-enabled machine.")]),e._v(" "),a("p",[a("code",[e._v("encrypted-hello")]),e._v(" is the code user wants to protect. It is encrypted during building process. The encryption key is dynamically generated.")]),e._v(" "),a("p",[a("code",[e._v("pcl-seal")]),e._v(" is a remote SGX app. It contains a sealing enclave which is in charge of storing the encryption key and provide it to the PCL API.")]),e._v(" "),a("h2",{attrs:{id:"build-and-run"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-and-run"}},[e._v("#")]),e._v(" Build and Run")]),e._v(" "),a("p",[e._v("To build, just type "),a("code",[e._v("make")]),e._v(" and everything should be fine.")]),e._v(" "),a("p",[e._v("To run, please put your IAS registration files (client.key, client.crt and spid.txt) in under "),a("code",[e._v("pcl_seal/bin/")]),e._v(". Then")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd pcl-seal/bin\n$ ./app (add --unlink if your spid's type is unlinkable)\n")])])]),a("p",[e._v("In another terminal, start the pcl-user app:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd pcl-user\n$ cargo run\n")])])]),a("p",[e._v("Next you'll see "),a("code",[e._v("pcl-seal")]),e._v(" starts getting a report from Intel and establishes a RA-based TLS channel with "),a("code",[e._v("pcl-user")]),e._v(" and gets sealed key provisioned and stored in "),a("code",[e._v("SgxFile")]),e._v(". At last, "),a("code",[e._v("pcl-seal")]),e._v(" will launch the "),a("code",[e._v("encrypted-hello")]),e._v(" enclave and finally print the hello message.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Entering get_sealed_pcl_key\nSgxFs read success: 68F6DEF27C33F248864A74D9607EA6B3\nget_sealed_pcl_key 040002000000...(suppressed)\n[+] Home dir is /root\n[-] Open token file /root/payload.token error! Will create one.\n[+] Init Enclave Successful 3!\nThis is a normal world string passed into Enclave!\nThis is a in-Enclave Rust string!\n[+] Done!\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);