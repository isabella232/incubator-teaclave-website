(window.webpackJsonp=window.webpackJsonp||[]).push([[107],{494:function(e,a,t){"use strict";t.r(a);var s=t(29),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"hashbrown"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashbrown"}},[e._v("#")]),e._v(" hashbrown")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://travis-ci.com/rust-lang/hashbrown",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://travis-ci.com/rust-lang/hashbrown.svg?branch=master",alt:"Build Status"}})]),e._v(" "),t("a",{attrs:{href:"https://crates.io/crates/hashbrown",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://img.shields.io/crates/v/hashbrown.svg",alt:"Crates.io"}})]),e._v(" "),t("a",{attrs:{href:"https://docs.rs/hashbrown",target:"_blank",rel:"noopener noreferrer"}},[t("img",{attrs:{src:"https://docs.rs/hashbrown/badge.svg",alt:"Documentation"}})])]),e._v(" "),t("p",[e._v("This crate is a Rust port of Google's high-performance "),t("a",{attrs:{href:"https://abseil.io/blog/20180927-swisstables",target:"_blank",rel:"noopener noreferrer"}},[e._v("SwissTable")]),e._v(" hash\nmap, adapted to make it a drop-in replacement for Rust's standard "),t("code",[e._v("HashMap")]),e._v("\nand "),t("code",[e._v("HashSet")]),e._v(" types.")]),e._v(" "),t("p",[e._v("The original C++ version of SwissTable can be found "),t("a",{attrs:{href:"https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h",target:"_blank",rel:"noopener noreferrer"}},[e._v("here")]),e._v(", and this\n"),t("a",{attrs:{href:"https://www.youtube.com/watch?v=ncHmEUmJZf4",target:"_blank",rel:"noopener noreferrer"}},[e._v("CppCon talk")]),e._v(" gives an overview of how the algorithm works.")]),e._v(" "),t("p",[e._v("Since Rust 1.36, this is now the "),t("code",[e._v("HashMap")]),e._v(" implementation for the Rust standard\nlibrary. However you may still want to use this crate instead since it works\nin environments without "),t("code",[e._v("std")]),e._v(", such as embedded systems and kernels.")]),e._v(" "),t("h2",{attrs:{id:"change-log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#change-log"}},[e._v("#")]),e._v(" "),t("RouterLink",{attrs:{to:"/teaclave-sgx-sdk/sgx_tstd/hashbrown/CHANGELOG.html"}},[e._v("Change log")])],1),e._v(" "),t("h2",{attrs:{id:"features"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[e._v("#")]),e._v(" Features")]),e._v(" "),t("ul",[t("li",[e._v("Drop-in replacement for the standard library "),t("code",[e._v("HashMap")]),e._v(" and "),t("code",[e._v("HashSet")]),e._v(" types.")]),e._v(" "),t("li",[e._v("Uses "),t("code",[e._v("AHash")]),e._v(" as the default hasher, which is much faster than SipHash.")]),e._v(" "),t("li",[e._v("Around 2x faster than the previous standard library "),t("code",[e._v("HashMap")]),e._v(".")]),e._v(" "),t("li",[e._v("Lower memory usage: only 1 byte of overhead per entry instead of 8.")]),e._v(" "),t("li",[e._v("Compatible with "),t("code",[e._v("#[no_std]")]),e._v(" (but requires a global allocator with the "),t("code",[e._v("alloc")]),e._v(" crate).")]),e._v(" "),t("li",[e._v("Empty hash maps do not allocate any memory.")]),e._v(" "),t("li",[e._v("SIMD lookups to scan multiple hash entries in parallel.")])]),e._v(" "),t("h2",{attrs:{id:"performance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#performance"}},[e._v("#")]),e._v(" Performance")]),e._v(" "),t("p",[e._v("Compared to the previous implementation of "),t("code",[e._v("std::collections::HashMap")]),e._v(" (Rust 1.35).")]),e._v(" "),t("p",[e._v("With the hashbrown default AHash hasher (not HashDoS-resistant):")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" name                       oldstdhash ns/iter  hashbrown ns/iter  diff ns/iter   diff %  speedup \n insert_ahash_highbits        20,846              7,397                   -13,449  -64.52%   x 2.82 \n insert_ahash_random          20,515              7,796                   -12,719  -62.00%   x 2.63 \n insert_ahash_serial          21,668              7,264                   -14,404  -66.48%   x 2.98 \n insert_erase_ahash_highbits  29,570              17,498                  -12,072  -40.83%   x 1.69 \n insert_erase_ahash_random    39,569              17,474                  -22,095  -55.84%   x 2.26 \n insert_erase_ahash_serial    32,073              17,332                  -14,741  -45.96%   x 1.85 \n iter_ahash_highbits          1,572               2,087                       515   32.76%   x 0.75 \n iter_ahash_random            1,609               2,074                       465   28.90%   x 0.78 \n iter_ahash_serial            2,293               2,120                      -173   -7.54%   x 1.08 \n lookup_ahash_highbits        3,460               4,403                       943   27.25%   x 0.79 \n lookup_ahash_random          6,377               3,911                    -2,466  -38.67%   x 1.63 \n lookup_ahash_serial          3,629               3,586                       -43   -1.18%   x 1.01 \n lookup_fail_ahash_highbits   5,286               3,411                    -1,875  -35.47%   x 1.55 \n lookup_fail_ahash_random     12,365              4,171                    -8,194  -66.27%   x 2.96 \n lookup_fail_ahash_serial     4,902               3,240                    -1,662  -33.90%   x 1.51 \n")])])]),t("p",[e._v("With the libstd default SipHash hasher (HashDoS-resistant):")]),e._v(" "),t("div",{staticClass:"language-text extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" name                       oldstdhash ns/iter  hashbrown ns/iter  diff ns/iter   diff %  speedup \n insert_std_highbits        32,598              20,199                  -12,399  -38.04%   x 1.61 \n insert_std_random          29,824              20,760                   -9,064  -30.39%   x 1.44 \n insert_std_serial          33,151              17,256                  -15,895  -47.95%   x 1.92 \n insert_erase_std_highbits  74,731              48,735                  -25,996  -34.79%   x 1.53 \n insert_erase_std_random    73,828              47,649                  -26,179  -35.46%   x 1.55 \n insert_erase_std_serial    73,864              40,147                  -33,717  -45.65%   x 1.84 \n iter_std_highbits          1,518               2,264                       746   49.14%   x 0.67 \n iter_std_random            1,502               2,414                       912   60.72%   x 0.62 \n iter_std_serial            6,361               2,118                    -4,243  -66.70%   x 3.00 \n lookup_std_highbits        21,705              16,962                   -4,743  -21.85%   x 1.28 \n lookup_std_random          21,654              17,158                   -4,496  -20.76%   x 1.26 \n lookup_std_serial          18,726              14,509                   -4,217  -22.52%   x 1.29 \n lookup_fail_std_highbits   25,852              17,323                   -8,529  -32.99%   x 1.49 \n lookup_fail_std_random     25,913              17,760                   -8,153  -31.46%   x 1.46 \n lookup_fail_std_serial     22,648              14,839                   -7,809  -34.48%   x 1.53 \n")])])]),t("h2",{attrs:{id:"usage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[e._v("#")]),e._v(" Usage")]),e._v(" "),t("p",[e._v("Add this to your "),t("code",[e._v("Cargo.toml")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-toml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('[dependencies]\nhashbrown = "0.8"\n')])])]),t("p",[e._v("Then:")]),e._v(" "),t("div",{staticClass:"language-rust extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('use hashbrown::HashMap;\n\nlet mut map = HashMap::new();\nmap.insert(1, "one");\n')])])]),t("p",[e._v("This crate has the following Cargo features:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("nightly")]),e._v(": Enables nightly-only features: "),t("code",[e._v("#[may_dangle]")]),e._v(".")]),e._v(" "),t("li",[t("code",[e._v("serde")]),e._v(": Enables serde serialization support.")]),e._v(" "),t("li",[t("code",[e._v("rayon")]),e._v(": Enables rayon parallel iterator support.")]),e._v(" "),t("li",[t("code",[e._v("raw")]),e._v(": Enables access to the experimental and unsafe "),t("code",[e._v("RawTable")]),e._v(" API.")]),e._v(" "),t("li",[t("code",[e._v("inline-more")]),e._v(": Adds inline hints to most functions, improving run-time performance at the cost\nof compilation time. (enabled by default)")]),e._v(" "),t("li",[t("code",[e._v("ahash")]),e._v(": Compiles with ahash as default hasher. (enabled by default)")]),e._v(" "),t("li",[t("code",[e._v("ahash-compile-time-rng")]),e._v(": Activates the "),t("code",[e._v("compile-time-rng")]),e._v(" feature of ahash, to increase the\nDOS-resistance, but can result in issues for "),t("code",[e._v("no_std")]),e._v(" builds. More details in\n"),t("a",{attrs:{href:"https://github.com/rust-lang/hashbrown/issues/124",target:"_blank",rel:"noopener noreferrer"}},[e._v("issue#124")]),e._v(". (enabled by default)")])]),e._v(" "),t("h2",{attrs:{id:"license"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#license"}},[e._v("#")]),e._v(" License")]),e._v(" "),t("p",[e._v("Licensed under either of:")]),e._v(" "),t("ul",[t("li",[e._v("Apache License, Version 2.0, ("),t("a",{attrs:{href:"LICENSE-APACHE"}},[e._v("LICENSE-APACHE")]),e._v(" or http://www.apache.org/licenses/LICENSE-2.0)")]),e._v(" "),t("li",[e._v("MIT license ("),t("a",{attrs:{href:"LICENSE-MIT"}},[e._v("LICENSE-MIT")]),e._v(" or http://opensource.org/licenses/MIT)")])]),e._v(" "),t("p",[e._v("at your option.")]),e._v(" "),t("h3",{attrs:{id:"contribution"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contribution"}},[e._v("#")]),e._v(" Contribution")]),e._v(" "),t("p",[e._v("Unless you explicitly state otherwise, any contribution intentionally submitted\nfor inclusion in the work by you, as defined in the Apache-2.0 license, shall be dual licensed as above, without any\nadditional terms or conditions.")])])}),[],!1,null,null,null);a.default=r.exports}}]);