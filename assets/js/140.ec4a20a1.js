(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{575:function(e,a,t){"use strict";t.r(a);var n=t(29),s=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"executing-webassembly-in-teaclave"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#executing-webassembly-in-teaclave"}},[e._v("#")]),e._v(" Executing WebAssembly in Teaclave")]),e._v(" "),t("p",[e._v("Teaclave integrates WebAssembly Micro Runtime as an executor, which can\ninterpret WebAssembly bytecode in a sandboxed environment. Theoretically, source\ncode written in any language which can be compiled to WebAssembly should also be\nexecutable in Teaclave. However, in order to be more secure, Teaclave cannot\nprovide interfaces such as syscalls to legacy applications, so the source code\nshould:")]),e._v(" "),t("ol",[t("li",[e._v("Be self-contained: not depending on libraries which are not provided by\nTeaclave, including standard libraries.")]),e._v(" "),t("li",[e._v("Contains no syscall: no system call-related code.")]),e._v(" "),t("li",[e._v("Implement required interface: exporting an "),t("code",[e._v("int entrypoint(int argc, char* argv[])")]),e._v(" function which is compatible with Teaclave WAMR calling convention\n(see examples for more details).")])]),e._v(" "),t("p",[e._v("Currently, "),t("a",{attrs:{href:"../sdk/payload/wasm"}},[e._v("Teaclave file system APIs")]),e._v(" are supported. We\nalso provide examples for compiling and executing from source code of various\nlanguages.")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("NOTE")]),e._v(" "),t("p",[e._v("In current Teaclave client SDK, when passing arguments to the registered\nfunction, each "),t("code",[e._v("(key, value)")]),e._v(" pair is converted into two string pointers in\n"),t("code",[e._v("argv")]),e._v(" and you should expect "),t("code",[e._v("argc")]),e._v(" is as twice as the actual number of\narguments. The calling convention is subject to further changes.")])]),e._v(" "),t("h2",{attrs:{id:"from-c"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-c"}},[e._v("#")]),e._v(" From C")]),e._v(" "),t("p",[t("code",[e._v("clang")]),e._v(" supporting "),t("code",[e._v("wasm32")]),e._v(" can be used for compiling Teaclave-compatible WASM\nbytecode. Remember to add following options while compiling:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("--target=wasm32 \\\n-nostdlib \\\n-Wl,--no-entry \\\n-Wl,--export-all, \\\n-Wl,--allow-undefined \n")])])]),t("p",[e._v("You can also use "),t("code",[e._v("clang")]),e._v(" provided by\n"),t("a",{attrs:{href:"https://github.com/WebAssembly/wasi-sdk",target:"_blank",rel:"noopener noreferrer"}},[e._v("wasi-sdk")]),e._v(", and the option\n"),t("code",[e._v("--target=wasm32")]),e._v(" is not needed for this version. We also provide an "),t("a",{attrs:{href:"https://github.com/apache/incubator-teaclave/tree/master/examples/python/wasm_c_millionaire_problem_payload",target:"_blank",rel:"noopener noreferrer"}},[e._v("example\npayload written in\nC")]),e._v(".")]),e._v(" "),t("p",[e._v("Alternatively, C and C++ code can be compiled with "),t("a",{attrs:{href:"https://ziglang.org",target:"_blank",rel:"noopener noreferrer"}},[e._v("zig")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("zig cc  -Os --target=wasm32-freestanding -shared -o example.wasm example.c\nzig c++ -Os --target=wasm32-freestanding -shared -o example.wasm example.cpp\n")])])]),t("h2",{attrs:{id:"from-rust"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#from-rust"}},[e._v("#")]),e._v(" From Rust")]),e._v(" "),t("p",[e._v("First of all, your cargo should support "),t("code",[e._v("wasm32")]),e._v(" target and "),t("code",[e._v("wasm-gc")]),e._v(" is\nrequired to reduce the size of generated binary. You can easily run the\nfollowing commands to install dependencies:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("rustup target add wasm32-unknown-unknown\ncargo install wasm-gc\n")])])]),t("p",[e._v("There should be an exported "),t("code",[e._v("entrypoint")]),e._v(" function in the source code, so you can\nsimply use "),t("code",[e._v("cargo")]),e._v(" to create a new library and generate it with "),t("code",[e._v("cargo build --target wasm32-unknown-unknown")]),e._v(". Please also add "),t("code",[e._v('crate-type = ["cdylib"]')]),e._v(" in\nthe "),t("code",[e._v("[lib]")]),e._v(" section into your "),t("code",[e._v("Cargo.toml")]),e._v(" file to let cargo generate WASM file.\nTo reduce the size of WASM file, run:")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cargo build --target wasm32-unknown-unknown --release\nwasm-gc target/wasm32-unknown-unknown/release/[WASM FILENAME]\n")])])]),t("p",[e._v("For detailed optimization options and function signature, please refer to the\n"),t("a",{attrs:{href:"https://github.com/apache/incubator-teaclave/tree/master/examples/python/wasm_rust_psi_payload",target:"_blank",rel:"noopener noreferrer"}},[e._v("example payload")]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"references"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://depth-first.com/articles/2020/06/29/compiling-rust-to-webassembly-a-simple-example/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Compiling Rust to WebAssembly: A Simple Example")])])])])}),[],!1,null,null,null);a.default=s.exports}}]);