(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{474:function(e,t,a){"use strict";a.r(t);var r=a(29),o=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"getting-started-with-op-tee-for-qemu-armv8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#getting-started-with-op-tee-for-qemu-armv8"}},[e._v("#")]),e._v(" Getting Started with OP-TEE for QEMU ARMv8")]),e._v(" "),a("p",[e._v("This tutorial summarizes the necessary steps of preparing an OP-TEE enabled\nQEMU environment and executing the compiled programs of our SDK. You may also\ncheck "),a("a",{attrs:{href:"https://optee.readthedocs.io/en/latest/building/devices/qemu.html#qemu-v8",target:"_blank",rel:"noopener noreferrer"}},[e._v("OP-TEE documentation")]),e._v("\nto find more information about setting up the QEMU or introduction of OP-TEE\nproject.")]),e._v(" "),a("p",[e._v("To run examples on the QEMU ARMv8 emulator, we need first build OP-TEE for QEMU\nARMv8. You can install dependencies with this\n"),a("a",{attrs:{href:"https://optee.readthedocs.io/en/latest/building/prerequisites.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("instruction")]),e._v("\nor use our "),a("a",{attrs:{href:"https://github.com/apache/incubator-teaclave-trustzone-sdk/blob/master/Dockerfile",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile")]),e._v(".")]),e._v(" "),a("p",[e._v("Download OP-TEE for QEMU ARMv8 source code.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ mkdir -p ~/bin\n$ curl https://storage.googleapis.com/git-repo-downloads/repo-1 > ~/bin/repo && chmod a+x ~/bin/repo\n$ export PATH=~/bin:$PATH\n$ mkdir optee-qemuv8-3.14.0 && cd optee-qemuv8-3.14.0 && \\\n  repo init -u https://github.com/OP-TEE/manifest.git -m qemu_v8.xml -b 3.14.0 && \\\n  repo sync -j4 --no-clone-bundle\n")])])]),a("p",[e._v("Build OP-TEE for QEMU ARMv8 and images.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd build\n$ make -j2 toolchains && \\\n  make QEMU_VIRTFS_ENABLE=y CFG_TEE_RAM_VA_SIZE=0x00300000\n")])])]),a("p",[e._v("Create a shared folder to share example host apps and TAs with QEMU guest system.")]),e._v(" "),a("p",[e._v("Note: the path "),a("code",[e._v("/project/root/dir/")]),e._v(' should be replaced as the root directory of your local project "rust-optee-trustzone-sdk".')]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ mkdir shared_folder\n$ (cd /project/root/dir/ && make examples-install)\n$ cp -r /project/root/dir/out/* shared_folder/\n")])])]),a("p",[e._v("Run QEMU.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ make run-only QEMU_VIRTFS_ENABLE=y QEMU_VIRTFS_HOST_DIR=$(pwd)/shared_folder\n")])])]),a("p",[e._v("After the QEMU has been booted, you need to mount the shared folder in QEMU guest system (username: root), in order to access the compiled CA/TA from QEMU.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ mkdir shared && mount -t 9p -o trans=virtio host shared\n")])])]),a("p",[e._v("Also, the passed-in TA should be copied to the corresponding directory for the secure-world to execute.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd shared && cp ta/*.ta /lib/optee_armtz/\n")])])]),a("p",[e._v("Execute host apps.")]),e._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ cd host\n$ ./hello_world\noriginal value is 29\ninc value is 129\ndec value is 29\nSuccess\n")])])]),a("p",[e._v("Note that if you are under a environment without GUI, you please comment out the following code in "),a("code",[e._v("qemu_v8.mk")]),e._v(" and use "),a("code",[e._v("nc")]),e._v(" instead.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('diff --git a/qemu_v8.mk b/qemu_v8.mk\nindex 8271590..1c4a91b 100644\n--- a/qemu_v8.mk\n+++ b/qemu_v8.mk\n@@ -163,9 +163,9 @@ run-only:\n        ln -sf $(ROOT)/out-br/images/rootfs.cpio.gz $(BINARIES_PATH)/\n        $(call check-terminal)\n        $(call run-help)\n-       $(call launch-terminal,54320,"Normal World")\n-       $(call launch-terminal,54321,"Secure World")\n-       $(call wait-for-ports,54320,54321)\n+       # $(call launch-terminal,54320,"Normal World")\n+       # $(call launch-terminal,54321,"Secure World")\n+       # $(call wait-for-ports,54320,54321)\n        cd $(BINARIES_PATH) && $(QEMU_PATH)/aarch64-softmmu/qemu-system-aarch64 \\\n                -nographic \\\n                -serial tcp:localhost:54320 -serial tcp:localhost:54321 \\\n')])])]),a("p",[e._v("Before start QEMU, run two "),a("code",[e._v("nc")]),e._v(" to listen port "),a("code",[e._v("54320")]),e._v(" and "),a("code",[e._v("54321")]),e._v(".")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("$ nc -l 127.0.0.1 -p 54320\n$ nc -l 127.0.0.1 -p 54321\n")])])]),a("p",[e._v("Then open QEMU by "),a("code",[e._v("make run-only")]),e._v(", and start by input "),a("code",[e._v("c")]),e._v(".")])])}),[],!1,null,null,null);t.default=o.exports}}]);